<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2022-06-12T09:27:30+00:00</updated><id>/jekyll-theme-yat/feed.xml</id><title type="html">IT 데이터베이스</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>GitHub User</name></author><entry><title type="html">[블록체인] 기본 개념 - 스마트 컨트랙트</title><link href="/jekyll-theme-yat/blockchain/2022/06/07/blockchain-02.html" rel="alternate" type="text/html" title="[블록체인] 기본 개념 - 스마트 컨트랙트" /><published>2022-06-07T00:00:00+00:00</published><updated>2022-06-07T00:00:00+00:00</updated><id>/jekyll-theme-yat/blockchain/2022/06/07/blockchain-02</id><content type="html" xml:base="/jekyll-theme-yat/blockchain/2022/06/07/blockchain-02.html"><![CDATA[<h2 id="스마트-컨트랙트란">스마트 컨트랙트란?</h2>

<p><code class="language-plaintext highlighter-rouge">스마트 컨트랙트(smart contract)</code>란 블록체인 기술을 활용해 제3의 인증기관 없이 개인 간 계약이 이루어질 수 있도록 하는 기술을 말한다. 서면으로 이루어지던 계약을 코드로 구현하고 해당 계약을 이행하는 과정에서 조건 충족 여부에 대한 판단을 인간이 아닌 컴퓨터 등의 기계가 대신 실행함으로써 제3의 인증기관이 필요 없도록 하는 개념을 의미한다.</p>

<p>스마트 컨트랙트를 활용하면 두 당사자가 서로를 모르거나 신뢰하지 않더라도 계약을 체결할 수 있다. 그 이유는 특정 조건이 충족되지 않으면 해당 계약은 실행되지 않기 때문이다.
그렇기 때문에, 제3의 인증기관 없이도 계약을 이행할 수 있는 것이 스마트 컨트랙트의 특징이다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/172295968-14dfcaac-ebf8-45a2-812b-b962fb5d413a.png" alt="image" /></p>

<p><br /></p>

<h2 id="스마트-컨트랙트-특징">스마트 컨트랙트 특징</h2>

<p><code class="language-plaintext highlighter-rouge">스마트 컨트랙트(smart contract)</code>의 개념을 최초로 제시한 닉 재보는 스마트 컨트랙트를 계약 코드를 통해 스스로 실행되는 전산화 계약이라고 정의했다.<br />
스마트 컨트랙트의 기본적인 특징은 아래와 같다.</p>

<h3 id="관측가능성">관측가능성</h3>
<p>스마트 계약은 서로의 계약 이행 가능성을 관찰하거나 성과를 입증할 수 있어야 한다.</p>

<h3 id="검증-가능성">검증 가능성</h3>
<p>계약을 이행 또는 위반할 경우 계약 당사자들이 이를 알 수 있어야 한다.</p>

<h3 id="프라이버시">프라이버시</h3>
<p>계약 내용은 계약에 필요한 당사자들만이 알 수 있어야 한다.</p>

<h3 id="강제-가능성">강제 가능성</h3>
<p>계약이 이뤄질 수 있도록 구속력이 있어야 한다.</p>

<p><br /></p>

<p>정리하면, 스마트 컨트랙트는 투명한 거래 내역이 공개되어야 한다. 실제로 Etherscan이나 Decentralized Metadata and Source Code Repository를 통해 이더리움 메인넷과 테스트넷에 배포된 모든 컨트랙트를 누구든지 조회할 수 있다.
또한, 스마트 컨트랙트는 블록체인 상에 trustless한 네트워크를 구축하는데 효과적이다. 영철이가 미영이에게 매달 일정한 금액을 전송한다고 했을 때 은행이나 신뢰할 수 있는 기관에 의존하지 않고서 해당 계약을 이행할 수 있게 된다.</p>

<p><br /></p>

<h2 id="스마트-컨트랙트-작동-원리">스마트 컨트랙트 작동 원리</h2>

<p><code class="language-plaintext highlighter-rouge">스마트 컨트랙트</code>는 블록체인 상에서 전자 계약서로 이루어지며, 계약 당사자들끼리 합의한 내용 및 조건이 충족되면 자동으로 실행되도록 설계되어 있다.<br />
계약 내용을 스마트 컨트랙트 소스 코드로 작성하여 블록체인 네트워크에 전송하면 네트워크 참여자(노드)들이 유효성 검증이 이뤄지며 검증이 완료되면 해당 스마트 컨트랙트가 포함된 블록이 생성되며 배포된다.</p>

<p>이후 블록체인은 스마트 컨트랙트가 담긴 블록의 변경 상태를 지속적으로 확인한다. 조건에 따른 변경시 명령 실행 비용을 계산하고 상태변경 트랜잭션을 생성한다.</p>

<h3 id="예시">예시</h3>

<ol>
  <li>부동산을 매도하고자 하는 사람이 부동산 매매 계약의 내용이 담긴 스마트 컨트랙트를 만들어 블록체인에 전송하면 블록이 생성되어 배포된다.</li>
  <li>블록체인 내 노드들은 이 스마트 컨트랙트를 검토하여 블록을 만드는데 합의하고 스마트 컨트랙트가 담긴 블록을 자신의 블록체인 맨 끝에 추가한다.</li>
  <li>이후 변경 사항들을 끊임없이 다른 블록들과 교류하면서 오류가 없는지 혹은 조건에 충족되어 추가 계약 사항이 진행되는지 체크한다.</li>
  <li>부동산 매수인은 블록체인 상에서 공개되어 있는 스마트 컨트랙트의 내용을 직접 확인한 후, 스마트 컨트랙트를 실행하기 위해 서명을 하게 된다.</li>
  <li>이후 부동산 매수자가 스마트 컨트랙트에 담긴 내용에 따라 부동산 매매 대가에 해당하는 디지털자산을 매도인에게 이전하게 되면 등록된 부동산의 소유권이 매수자에게 자동으로 이전된다.</li>
  <li>이때 블록체인 상에서의 스마트 컨트랙트는 대부분 오픈 소스(open source), 즉 누구나 확인할 수 있기 때문에 그 내용을 임의로 변경하거나 조작할 수 없습니다. 또한 스마트 컨트랙트의 체결사실도 모두에게 공유됩니다.</li>
</ol>

<p><img src="/jekyll-theme-yat/assets/images/banners/smartcontract.png" alt="" /></p>

<p><br /></p>

<h2 id="스마트-컨트랙트의-장점">스마트 컨트랙트의 장점</h2>

<p>스마트 컨트랙트의 장점은 크게 자율성, 신뢰, 비용절감, 안정성, 효율성 등으로 분류된다.</p>

<h3 id="자율성">자율성</h3>
<p>블록체인 내에서 진행되기 때문에 공신력을 가진 제 3자, 혹은 기관이 필요하지 않습니다. 이에 따라 거래 당사자들이 계약에 대한 온전한 권한, 통제성을 갖게 된다.</p>

<h3 id="비용-절감">비용 절감</h3>
<p>블록체인에서 관련 계약, 거래 내역 등을 보증할 수 있는 제3자나 공신력 있는 기관이 필요하지 않기 때문에 비용 절감의 효과를 가질 수 있다.</p>

<h3 id="신뢰성">신뢰성</h3>
<p>블록체인 내 스마트 컨트랙트에 의해 계약이 공정하게 진행되며 문서의 위변조가 극히 어려워 뛰어난 신뢰성을 가진다.</p>

<h3 id="보안성">보안성</h3>
<p>신뢰성과 연결된 것으로 문서가 암호화되어 블록체인 내 분산 원장 기술에 의해 안전하게 보관된다.</p>

<p><br /></p>

<h2 id="참조">참조</h2>
<ul>
  <li><a href="https://m.upbitcare.com/academy/education/blockchain/71">업비트</a></li>
</ul>]]></content><author><name>GitHub User</name></author><category term="BlockChain" /><category term="BlockChain" /><summary type="html"><![CDATA[스마트 컨트랙트란?]]></summary></entry><entry><title type="html">[블록체인] 기본 개념 - DApp이란?</title><link href="/jekyll-theme-yat/blockchain/2022/06/06/blockchain-01.html" rel="alternate" type="text/html" title="[블록체인] 기본 개념 - DApp이란?" /><published>2022-06-06T00:00:00+00:00</published><updated>2022-06-06T00:00:00+00:00</updated><id>/jekyll-theme-yat/blockchain/2022/06/06/blockchain-01</id><content type="html" xml:base="/jekyll-theme-yat/blockchain/2022/06/06/blockchain-01.html"><![CDATA[<h2 id="dapp-정의">DApp 정의</h2>

<p><code class="language-plaintext highlighter-rouge">디앱(DApp)</code> 또는 <code class="language-plaintext highlighter-rouge">댑</code>이란 Decentralized Application의 약자로서, 이더리움, 큐텀, 이오스 같은 플랫폼 코인 위에서 작동하는 탈중앙화 분산 애플리케이션을 말한다. 간략히 분산앱이라고도 한다. 플랫폼 위에서 작동하는 디앱의 암호화폐는 코인(coin)이라고 하지 않고 토큰(token)이라고 구별하여 부르기도 한다. ‘Daap’가 아니라 ‘DApp’가 올바른 표기법이다. ‘Dapp’ 또는 ‘dApp’이라고도 쓴다. 단수형이 아니라 복수형으로 표현하여, 디앱스(DApps) 또는 댑스(dApps)라고도 한다.</p>

<h2 id="개요">개요</h2>

<p>디앱이란 블록체인을 기반으로 돌아가는 애플리케이션을 말한다. 쉽게 말해 이더리움 기반 디엡이라면 디앱에서 상호작용하는 데이터들이 이더리움 블록체인에 기록되고 불러내어지는 애플리케이션이라고 이해하면 된다.
현재, 이더리움, 이오스, 스팀 등에서 돌아가는 모든 디앱들을 합치면 약 3,000여 개가 존재한다.</p>

<p>애플 앱스토어에만 220만여 개가 넘는 앱이 존재하는데, 이와 비교하면 아주 초라한 숫자이기도 하다. 전체 디앱 중에서 게임, 거래소, 도박 등을 뺀 실생활과 밀접한 영역의 디앱들의 유저 수 비중은 40%도 안 된다.</p>

<p>디앱은 스마트폰 <code class="language-plaintext highlighter-rouge">블록체인</code>을 기반으로 한 운영체제에서 구동된다는 것이 차이점이다. 아이폰은 ISO 운영체제를 갤럭시에는 안드로이드 OS를 사용한다. <code class="language-plaintext highlighter-rouge">블록체인</code>은 이러한 OS라고 생각하면 된다. 어떤 블록체인을 기반으로 구동되는지에 따라 이더리움 디앱, 이오스 디앱 등으로 구분할 수 있는 것이다.</p>

<h2 id="등장배경">등장배경</h2>

<p>블록체인에서 디앱은 <code class="language-plaintext highlighter-rouge">스마트 계약</code>이 도입되면서 생겨났다. 스마트 계약이 없는 비트코인에는 디앱이 존재하지 않는다. 
이더리움 창시자인 비탈릭 부테린은 이더리움에 스마트 계약을 처음 도입했다. 이 후 이더리움은 최초의 메인넷으로 무수한 디앱들을 탄생시켰다.</p>

<h2 id="특징">특징</h2>

<p>디앱 개념은 아직 초기 단계에 있다. 디앱으로는 응용 프로그램이 다음 네 가지 특징을 나타내야 한다.</p>

<ul>
  <li>탈중앙화 구조 : 디앱은 OS 개발에 필요한 소스 코드가 누구에게나 공개돼 있다.</li>
  <li>뛰어난 개인정보 보호 : 데이터를 블록체인에 기록하기 때문에 저장에 있어 안전하다.</li>
  <li>오픈 소스 : 가장 중요한 속성은 이러한 앱이 모든 사람에게 핵심 소스 코드를 제공해야 한다는 것이다. 디앱의 핵심 특징은 자율성과 만장일치로 이루어져 있음으로 기본적으로 변경 사항은 모든 사용자 또는 대부분 사용자가 결정해야 한다. 또한, 코드는 모든 사용자가 체크 아웃 할 수 있어야 한다.</li>
  <li>분산형 자연 : 이름에서 알 수 있듯이 분산형 응용 프로그램은 분산된 블록체인 또는 모든 암호화 기술에 모든 것을 저장하여 중앙 권한의 위험으로부터 응용 프로그램을 저장하고 자치 특성을 강조한다.</li>
  <li>인센티브(Incentivization) : 앱이 분산형 블록체인을 기반으로 하므로 네트워크의 레코드 유효성 검사기에 암호화 토큰이나 가치가 있는 디지털 자산 형태로 보상/ 인센티브를 부여해야 한다.</li>
  <li>알고리즘 : 분산 앱은 암호화 시스템에서 가치 증명을 나타내는 컨센서스 메커니즘이 필요하다. 본질적으로 이는 암호 토큰의 가치를 부여하고 사용자가 중요한 암호 토큰을 생성하기 위해 합의한 합의 프로토콜을 만든다.</li>
</ul>

<h2 id="앱과-디앱의-차이">앱과 디앱의 차이</h2>

<ul>
  <li>디앱은 사용자가 계정을 생성하는 절차부터 앱과 다르다. 일반 앱은 회원가입을 할 때는 개인정보를 입력해 계정을 만들고 로그인 후 즉시 서비스를 이용한다. 하지만, 디앱의 경우 계정을 만들 때, <code class="language-plaintext highlighter-rouge">이더리움</code>, <code class="language-plaintext highlighter-rouge">이오스</code> 등 해당 블록체인 지갑을 보유하고 있어야 한다. 해당 블록체인 서비스에 참여함으로써, 보상으로 받는 암호화폐를 저장하고 거래하기 위한 지갑을 준비하는 것이다.</li>
  <li>이더리움 기반 디앱은 이더리움 지갑을, 이오스 기반 디앱은 이오스 지갑을 갖춰야 한다. 예를 들어 이더리움 게임으로 잘 알려진 크립토키티를 이용하려면 메타마스크라는 이더리움 지갑을 만들고, 서비스를 이용할 때마다 메타마스크 인증을 해야 한다.</li>
  <li>디앱과 기존 앱 개발의 가장 큰 차이점이라면 얼마나 엄격하게, 정밀하게 점검하느냐이다. 쉽게 말해, 디앱은 소프트웨어 개발보다는 하드웨어 개발과 더 비슷하다. 어떤 회사가 하드웨어를 완성했다면 제품을 공개하기전에 반드시 엄격하게 정밀하게 테스트를 한 후 공개해야 한다. 하드웨어 개발이 끝난 뒤 공개되었을 때, 미처 발견하지 못한 문제점들이 생긴다면 기존 소프트웨어 수정보다 훨씬 더 많은 돈과 시간을 요구한다. 왜냐하면 <code class="language-plaintext highlighter-rouge">디앱 개발에서 스마트 계약이 메인넷에서 한번 실행되면 절대 변경이 안 되기 때문이다.</code></li>
  <li>만약 오류가 생긴다면 스마트 계약에서 발견된 버그 때문에 사용자들의 암호화폐를 잃어버릴 가능성도 배제할 수 없다. 그래서 쉽게, 그리고 빠르게 개발하여 공개할 수 없는 이유도 된다.</li>
  <li>이와 반대로 기존 앱 개발은 빠르게 변하는 트렌드에 맞춰 새로운 서비스를 계속해서 만들어내는 것에 집중하는 편이다. 개발자로서 최소한의 실행 가능한 제품 즉, MVPs를 만들고 사람들이 직접 테스트하게 한 후 가능한 한 빨리 업데이트된 버전을 출시하는 것이 요새 앱 개발의 추세이지만 현재 디앱 개발자들에게는 적합하지 않은 추세다.</li>
</ul>

<p><br /></p>

<p style="text-align: center;"><img src="https://user-images.githubusercontent.com/52439201/172168332-f81afcc3-7170-4033-998b-51db7175ce1a.png" alt="image" /><br />
출처자료: 현암 코딩</p>

<p>정리해서, 기존 앱은 구글 플레이 스토어나 앱 스토어에 등록하여 구글과 애플의 <code class="language-plaintext highlighter-rouge">중앙화</code>된 서버에서 관리를 받는 반면에,<br />
디앱은 분산된 P2P 간의 자율적인 연결에 의해 <code class="language-plaintext highlighter-rouge">탈중앙화</code>된 이더리움, 이오스, 트론 등과 같은 스마트계약 기능이 있는 블록체인 플랫폼 위에서 작동되는 방식이다.</p>

<h2 id="출처">출처</h2>
<ul>
  <li><a href="http://wiki.hash.kr/index.php/%EB%94%94%EC%95%B1">해시넷</a></li>
</ul>]]></content><author><name>GitHub User</name></author><category term="BlockChain" /><category term="BlockChain" /><summary type="html"><![CDATA[DApp 정의]]></summary></entry><entry><title type="html">[TypeScript] 인터페이스 이해하기</title><link href="/jekyll-theme-yat/typescirpt/2022/05/17/typescript-02.html" rel="alternate" type="text/html" title="[TypeScript] 인터페이스 이해하기" /><published>2022-05-17T00:00:00+00:00</published><updated>2022-05-17T00:00:00+00:00</updated><id>/jekyll-theme-yat/typescirpt/2022/05/17/typescript-02</id><content type="html" xml:base="/jekyll-theme-yat/typescirpt/2022/05/17/typescript-02.html"><![CDATA[<h2 id="인터페이스란">인터페이스란?</h2>

<p>인터페이스는 상호 간에 정의한 약속 혹은 규칙을 의미한다. 인터페이스는 보통 다음과 같은 범주에 대해서 약속을 정의할 수 있다.</p>

<ul>
  <li>객체의 스펙(속성과 속성의 타입)</li>
  <li>함수의 파라미터</li>
  <li>함수의 스펙(파라미터, 반환 타입 등)</li>
  <li>배열과 객체를 접근하는 방식</li>
  <li>클래스</li>
</ul>

<h2 id="인터페이스-예제">인터페이스 예제</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">20</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">who</span><span class="p">(</span> <span class="nx">obj</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="nx">number</span> <span class="p">})</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// seongsik</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 20</span>
<span class="p">}</span>

<span class="nx">who</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</code></pre></div></div>

<p>위의 <code class="language-plaintext highlighter-rouge">who</code> 함수는 name과 age 속성을 갖는 객체를 인자로 받는다. 이렇게 인자를 받을 때 단순히 타입 뿐만 아니라 객체의 속성 타입까지 정의할 수 있다.
아래와 같이 인터페이스를 적용해보자.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">whoType</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">20</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">who</span><span class="p">(</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">whoType</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">who</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</code></pre></div></div>

<p>인터페이스를 사용하면 코드를 명시적으로 바뀔 수 있다. 
이제 <code class="language-plaintext highlighter-rouge">who()</code> 함수는 <code class="language-plaintext highlighter-rouge">whoType</code>라는 타입만 가져야 한다.</p>

<p><br /></p>

<h2 id="인터페이스-옵션-속성">인터페이스 옵션 속성</h2>
<p>인터페이스에 명시되어 있는 속성타입을 모두 다 사용할 필요는 없다. 이를 가능하게 하는 것이 <code class="language-plaintext highlighter-rouge">옵션 속성</code>이다.</p>

<p>아래의 예제 코드를 보자.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">인터페이스이름</span> <span class="p">{</span>
  <span class="nl">속성1</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">속성2</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">속성3</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이처럼 <code class="language-plaintext highlighter-rouge">?</code> 물음표를 속성 끝에 붙이면 해당 속성을 꼭 사용하지 않아도 된다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">whoType</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">address</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">who</span><span class="p">(</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">whoType</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">20</span> <span class="p">};</span>

<span class="nx">who</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</code></pre></div></div>

<p>인자로 넘긴 user객체에 <code class="language-plaintext highlighter-rouge">address</code> 속성이 없어도 에러가 발생하지 않는다.
<code class="language-plaintext highlighter-rouge">whoType</code>타입에 address 인자에 <code class="language-plaintext highlighter-rouge">?</code> 붙여 옵션 속성을 사용했기 때문이다.</p>

<p><br /></p>

<h2 id="인터페이스-읽기-전용-속성">인터페이스 읽기 전용 속성</h2>

<p>읽기 전용 속성은 인터페이스로 객체를 처음 생성할 때 값을 할당하고, 그 이후에는 변경할 수 없는 속성을 말한다.</p>

<p>아래의 코드와 같이 <code class="language-plaintext highlighter-rouge">readonly</code> 속성을 사용하면 오직 읽기만 가능하기 때문에 선언이후 수정하려고 하면 아래와 같이 오류가 발생한다.</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">userType</span> <span class="p">{</span>
 <span class="k">readonly</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">userType</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span>
<span class="p">};</span>

<span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">siksik</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 읽기 전용 속성이므로 'name'에 할당할 수 없습니다.</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="인터페이스-읽기-전용-배열">인터페이스 읽기 전용 배열</h2>
<p>배열의 읽기전용 속성은 <code class="language-plaintext highlighter-rouge">ReadonlyArray&lt;T&gt;</code> 타입속성을 사용하면 읽기 전용 배열을 생성할 수 있다.</p>

<p>만약 배열을 수정하려고 하면 아래와 같이 오류가 발생한다.</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span><span class="p">:</span> <span class="nx">ReadonlyArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>

<span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span> <span class="c1">// 'readonly number[]' 형식의 인덱스 시그니처는 읽기만 허용됩니다.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 'readonly number[]' 형식에 'push' 속성이 없습니다.</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="객체-선언과-관련된-타입-체킹">객체 선언과 관련된 타입 체킹</h2>
<p>타입스크립트는 인터페이스를 통해 객체를 선언할 때 좀더 엄밀한 속성 검사를 진행한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">userTpye</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">user</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">userTpye</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">user</span><span class="p">({</span><span class="na">nam</span><span class="p">:</span><span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">})</span> <span class="c1">// '{ nam: string; }' 형식의 인수는 'userTpye' 형식의 매개 변수에 할당될 수 없습니다. 개체 리터럴은 알려진 속성만 지정할 수 있지만 'userTpye' 형식에 'nam'이(가) 없습니다. 'name'을(를) 쓰려고 했습니까?</span>
</code></pre></div></div>

<p>인터페이스에서는 <code class="language-plaintext highlighter-rouge">name</code>으로 선언했지만 함수에 인자로 넘기는 객체는 <code class="language-plaintext highlighter-rouge">nam</code>로 선언되어 있기 때문에 오류가 발생한다.</p>

<p>만약 이런 타입 추론을 무시하고 싶으면 아래와 같이 선언한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="p">{</span><span class="na">nam</span><span class="p">:</span><span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">}</span>
<span class="nx">user</span><span class="p">(</span><span class="nx">myName</span> <span class="k">as</span> <span class="nx">userTpye</span><span class="p">)</span>
</code></pre></div></div>

<p>또한, 인터페이스에 정의하지 않는 속성들을 추가로 사용하고 싶다면 아래와 같이 작성한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">userTpye</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">[</span><span class="nx">propName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="인터페이스-함수-타입">인터페이스 함수 타입</h2>
<p>인터페이스는 함수의 타입도 정의할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">fnType</span> <span class="p">{</span>
  <span class="p">(</span><span class="nx">name</span><span class="p">:</span><span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="kr">string</span><span class="p">):</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">fn</span><span class="p">:</span> <span class="nx">fnType</span>
<span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span><span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// seongsik</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>  <span class="c1">// 20</span>
  <span class="k">return</span> <span class="s2">`이름은 </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">, 나이는 </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fn</span><span class="p">(</span><span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 이름은 seongsik, 나이는 20</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="인터페이스-클래스-타입">인터페이스 클래스 타입</h2>
<p>자바와 같은 클래스도 타입 규칙을 적용할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">userTpye</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">fnUser</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">User</span> <span class="k">implements</span> <span class="nx">userTpye</span> <span class="p">{</span>
  <span class="nl">name</span> <span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">fnUser</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>


<span class="kd">let</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// seongsik</span>
<span class="nx">test</span><span class="p">.</span><span class="nx">fnUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">siksik</span><span class="dl">'</span><span class="p">)</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// siksik</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="인터페이스-확장">인터페이스 확장</h2>

<p>인터페이스도 클래스처럼 확장할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Job</span> <span class="kd">extends</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">Who</span> <span class="p">:</span> <span class="nx">Job</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">developer</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// 혹은</span>

<span class="kd">let</span> <span class="nx">who2</span> <span class="o">=</span> <span class="p">{}</span> <span class="k">as</span> <span class="nx">Job</span><span class="p">;</span>
<span class="nx">who2</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">who2</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">developer</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="인터페이스-하이브리드-타입">인터페이스 하이브리드 타입</h2>
<p>자바스크립트의 유연하고 동적인 타입 특성을 고려해 인터페이스도 여러 가지 타입을 조합해 사용할 수 있도록 되어있다.
예를 들어, 함수 타입이면서 객체 타입을 정의할 수 있는 인터페이가 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">UserType</span> <span class="p">{</span>
  <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">brew</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">User</span><span class="p">():</span> <span class="nx">UserType</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">who</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{})</span> <span class="k">as</span> <span class="nx">UserType</span><span class="p">;</span>
  <span class="nx">who</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">developer</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">who</span><span class="p">.</span><span class="nx">brew</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
  <span class="k">return</span> <span class="nx">who</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">Who</span> <span class="o">=</span> <span class="nx">User</span><span class="p">();</span>
<span class="nx">Who</span><span class="p">(</span><span class="dl">'</span><span class="s1">seongsik</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">Who</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">HR</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">Who</span><span class="p">.</span><span class="nx">brew</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Who</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>GitHub User</name></author><category term="Typescirpt" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[인터페이스란?]]></summary></entry><entry><title type="html">[Javascript] 함수형 프로그래밍 - go, pipe, curry</title><link href="/jekyll-theme-yat/javascript/2022/05/12/javascript-14.html" rel="alternate" type="text/html" title="[Javascript] 함수형 프로그래밍 - go, pipe, curry" /><published>2022-05-12T00:00:00+00:00</published><updated>2022-05-12T00:00:00+00:00</updated><id>/jekyll-theme-yat/javascript/2022/05/12/javascript-14</id><content type="html" xml:base="/jekyll-theme-yat/javascript/2022/05/12/javascript-14.html"><![CDATA[<h2 id="시작으로">시작으로</h2>

<blockquote>
  <p>해당 글은 유인동님의 함수형 프로그래밍 강의내용을 정리하였습니다.</p>
</blockquote>

<p>아래와 같이 함수가 중첩되어 표현되면 가독성이 떨어지기 때문에 함수형 프로그래밍에서는 코드를 값으로 다뤄 표현력을 높일 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">log</span><span class="p">(</span>
    <span class="nx">reduce</span><span class="p">(</span>
        <span class="nx">add</span><span class="p">,</span>
        <span class="nx">map</span><span class="p">(</span><span class="nx">p</span><span class="o">=&gt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span> 
        <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="o">=&gt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">,</span> <span class="nx">prod</span><span class="p">))</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="go">go</h2>

<p>go함수에는 첫 번째는 값의 시작값을 넣고 그 외는 나머지 연산자로 함수들을 받아 값을 다음 함수로 계속해서 넘기면서 함수를 실행시켜주는 함수이다.</p>

<p>밑의 예제를 통해 쉽게 이해해보자.</p>

<h3 id="reduce-활용">reduce 활용</h3>

<p>go 함수는 함수들을 차례대로 실행하면서 첫 번째 인자값을 축약하는 함수이기 때문에 reduce 함수를 활용한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">acc</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">iter</span><span class="p">){</span>
        <span class="nx">iter</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">){</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">func</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">acc</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="구현">구현</h3>
<p>아래의 go함수는 0값을 차례대로 5개의 함수에 넘겨 처리하는 함수이다. 실행순서는 다음과 같다.</p>

<blockquote>
  <p>0, a =&gt; a+1</p>
  <ul>
    <li>0을 인자로 받아 0+1을 처리하여 <code class="language-plaintext highlighter-rouge">1</code>을 리턴한다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>1, a =&gt; a+10</p>
  <ul>
    <li>1을 인자로 받아 1+10을 처리하여 <code class="language-plaintext highlighter-rouge">11</code>을 리턴한다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>11, a =&gt; a+100</p>
  <ul>
    <li>11을 인자로 받아 11+100을 처리하여 <code class="language-plaintext highlighter-rouge">111</code>을 리턴한다.</li>
  </ul>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">go</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="nx">arg</span><span class="p">)</span>

<span class="nx">go</span><span class="p">(</span>
    <span class="mi">0</span><span class="p">,</span>
    <span class="nx">a</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
    <span class="nx">a</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span>
    <span class="nx">a</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="mi">100</span><span class="p">,</span>
    <span class="nx">log</span> <span class="c1">// 출력 : 111</span>
<span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="pipe">pipe</h2>
<p>pipe함수는 go함수와 다르게 함수를 리턴하는 함수이다. pipe함수는 여러 함수들을 인자로 받아 하나의 함수로 리턴한다.
그리고 go함수를 사용한다.</p>

<h3 id="구현-1">구현</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">fs</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">go</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">fs</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">100</span><span class="p">,</span>
    <span class="nx">log</span>
<span class="p">)</span>

<span class="nx">f</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">/// 111 출력</span>
<span class="nx">f</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">/// 121 출력</span>
</code></pre></div></div>

<h3 id="여러개의-인자를-받도록-수정">여러개의 인자를 받도록 수정</h3>
<p>그런데 여기서 go함수는 첫 번째 인자에 <code class="language-plaintext highlighter-rouge">add(0,10)</code>와 같이 인자를 두개 전달하여 처리된 값을 함수로 전달할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">go</span><span class="p">(</span>
    <span class="nx">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">100</span><span class="p">,</span>
    <span class="nx">log</span>
<span class="p">)</span>
</code></pre></div></div>

<p>pipe도 그렇게 할수 있도록 코드를 수정해보자.</p>

<blockquote>
  <p>첫 번째로 받은 <code class="language-plaintext highlighter-rouge">f</code> 함수와 <code class="language-plaintext highlighter-rouge">...fs</code>를 따로 받는다. 그리고 리턴된 합성함수의 인자를 rest 파라미터로 처리하여 f함수에 넣고 그 결과를 나머지 함수들이 받으면서 처리하는 구조이다.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="p">...</span><span class="nx">fs</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(...</span><span class="nx">arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">go</span><span class="p">(</span><span class="nx">f</span><span class="p">(...</span><span class="nx">arg</span><span class="p">),</span> <span class="p">...</span><span class="nx">fs</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">pipe</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span>
    <span class="nx">a</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">100</span><span class="p">,</span>
    <span class="nx">log</span>
<span class="p">)</span>

<span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 114</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="go함수를-활용하여-더-좋은-코드로-개선">go함수를 활용하여 더 좋은 코드로 개선</h2>

<ul>
  <li>개선전 코드</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">prod</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">과자</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">2500</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">소시지</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">2000</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">맥주</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">5000</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">음료수</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">1500</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">껌</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">1000</span><span class="p">},</span>
<span class="p">]</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">filter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span>
            <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">acc</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">iter</span><span class="p">){</span>
        <span class="nx">iter</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">){</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">func</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">acc</span>
<span class="p">}</span>

<span class="nx">log</span><span class="p">(</span>
  <span class="nx">reduce</span><span class="p">(</span>
      <span class="nx">add</span><span class="p">,</span>
      <span class="nx">map</span><span class="p">(</span><span class="nx">p</span><span class="o">=&gt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span> 
      <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="o">=&gt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">,</span> <span class="nx">prod</span><span class="p">))</span>
  <span class="p">)</span>
<span class="p">)</span> <span class="c1">// 출력 : 7500</span>
  
</code></pre></div></div>

<ul>
  <li>개선후 코드</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">go</span><span class="p">(</span>
    <span class="nx">prod</span><span class="p">,</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">,</span> <span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span> <span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prices</span> <span class="o">=&gt;</span> <span class="nx">reduce</span><span class="p">(</span><span class="nx">add</span><span class="p">,</span> <span class="nx">prices</span><span class="p">),</span>
    <span class="nx">log</span>
<span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="curry">curry</h2>
<p>curry를 사용하면 함수를 부분적으로 사용할 수 있게 된다.
기존의 map, filter, reduce 함수들은 인자값을 2개를 받아야 실행되었다.
curry를 감싸게 되면 부족한 인자가 들어올 때까지 대기하다가 들어오면 함수를 실행하게 된다.</p>

<ul>
  <li>curry는 함수를 인자로 받아 함수를 리턴해준다.</li>
  <li>리턴받은 합성함수는 1개 이상의 인자를 받는데 인자의 갯수가 2개 이상이면 처음 받았던 함수를 즉시 실행하고, 2보다 적으면 기다렸다가 인자를 받으면 함수를 실행한다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">curry</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">length</span> <span class="p">?</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">)</span> <span class="p">:</span> <span class="p">(...</span><span class="nx">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">);</span>

<span class="c1">// 1. a와 b의 곱셈을 리턴하는 함수를 인자로 받는다. </span>
<span class="c1">// 2. 그리고 함수를 리턴한다.</span>
<span class="kd">const</span> <span class="nx">mult</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span> 
<span class="nx">log</span><span class="p">(</span><span class="nx">mult</span><span class="p">)</span> <span class="c1">// (a, ..._) =&gt; _.length ? f(a, ..._) : (..._) =&gt; f(a, ..._)</span>

<span class="nx">log</span><span class="p">(</span><span class="nx">mult</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span> <span class="c1">// 인자가 1개이므로 (..._) =&gt; f(a, ..._)를 리턴한다.</span>
<span class="nx">log</span><span class="p">(</span><span class="nx">mult</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">6</span><span class="p">))</span> <span class="c1">// 리턴받은 함수에 6을 인자로 넘겨줬기 때문에 (6) =&gt; f(3, 6)이 실행된다.</span>
</code></pre></div></div>

<h3 id="go--curry를-사용하여-더-좋은-코드로-만들기">go + curry를 사용하여 더 좋은 코드로 만들기</h3>

<ul>
  <li>map, filter, reduce를 cuury로 감싼다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">prod</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">과자</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">2500</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">소시지</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">2000</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">맥주</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">5000</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">음료수</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">1500</span><span class="p">},</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">껌</span><span class="dl">'</span><span class="p">,</span> <span class="na">price</span><span class="p">:</span><span class="mi">1000</span><span class="p">},</span>
<span class="p">]</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">curry</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">length</span> <span class="p">?</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">)</span> <span class="p">:</span> <span class="p">(...</span><span class="nx">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">_</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">((</span><span class="nx">func</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">((</span><span class="nx">func</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span>
            <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">})</span>

<span class="kd">const</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">((</span><span class="nx">func</span><span class="p">,</span> <span class="nx">acc</span><span class="p">,</span> <span class="nx">iter</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">iter</span><span class="p">){</span>
        <span class="nx">iter</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter</span><span class="p">){</span>
        <span class="nx">acc</span> <span class="o">=</span> <span class="nx">func</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">acc</span>
<span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>기존의 go 함수를 아래와 같이 사용할 수 있다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">go</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="nx">arg</span><span class="p">)</span>

<span class="c1">// curry 적용 전</span>
<span class="nx">go</span><span class="p">(</span>
    <span class="nx">prod</span><span class="p">,</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">,</span> <span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span> <span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prices</span> <span class="o">=&gt;</span> <span class="nx">reduce</span><span class="p">(</span><span class="nx">add</span><span class="p">,</span> <span class="nx">prices</span><span class="p">),</span>
    <span class="nx">log</span>
<span class="p">)</span>

<span class="c1">// cuury 적용 후</span>
<span class="nx">go</span><span class="p">(</span>
    <span class="nx">prod</span><span class="p">,</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">)(</span><span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prod</span> <span class="o">=&gt;</span> <span class="nx">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">)(</span><span class="nx">prod</span><span class="p">),</span>
    <span class="nx">prices</span> <span class="o">=&gt;</span> <span class="nx">reduce</span><span class="p">(</span><span class="nx">add</span><span class="p">)(</span><span class="nx">prices</span><span class="p">),</span>
    <span class="nx">log</span>
<span class="p">)</span>

<span class="c1">// cuury를 사용하고 있으므로 중복되는 prod를 제거해도 똑같이 실행된다.</span>
<span class="nx">go</span><span class="p">(</span>
    <span class="nx">prod</span><span class="p">,</span>
    <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="o">&gt;</span><span class="mi">2000</span><span class="p">),</span>
    <span class="nx">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">price</span><span class="p">),</span>
    <span class="nx">reduce</span><span class="p">(</span><span class="nx">add</span><span class="p">),</span>
    <span class="nx">log</span>
<span class="p">)</span>
</code></pre></div></div>]]></content><author><name>GitHub User</name></author><category term="Javascript" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[시작으로]]></summary></entry><entry><title type="html">[React] 엘리먼트, 컴포넌트, 인스턴스 개념</title><link href="/jekyll-theme-yat/react/2022/05/09/react-03.html" rel="alternate" type="text/html" title="[React] 엘리먼트, 컴포넌트, 인스턴스 개념" /><published>2022-05-09T00:00:00+00:00</published><updated>2022-05-09T00:00:00+00:00</updated><id>/jekyll-theme-yat/react/2022/05/09/react-03</id><content type="html" xml:base="/jekyll-theme-yat/react/2022/05/09/react-03.html"><![CDATA[<h2 id="시작으로">시작으로</h2>

<p>해당 포스터는</p>

<ul>
  <li><a href="https://velog.io/@yejineee/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EA%B0%80-%ED%8A%B8%EB%A6%AC%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8B%A4">리액트 컴포넌트, 엘리먼트, 인스턴스</a></li>
  <li><a href="https://it-eldorado.tistory.com/82?category=832493">IT 엘도라도</a></li>
</ul>

<p>블로그를 참조하여 정리하였습니다.</p>

<p><br /></p>

<h2 id="엘리먼트element">엘리먼트(Element)</h2>
<ul>
  <li>화면에 렌더링 할 DOM 노드들의 정보를 React에 알려주기 위한 수단으로 React에서 가장 작은 단위이다.</li>
  <li>브라우저 DOM 엘리먼트와 달리 React 엘리먼트는 일반 객체이며(plain object) 쉽게 생성할 수 있다. React DOM은 React 엘리먼트와 일치하도록 DOM을 업데이트한다.</li>
  <li>type(문자열 혹은 컴포넌트 함수/클래스)과 props(객체)로 표현된다.</li>
  <li>하나 이상의 자식 엘레먼트는 props의 children 필드로 표현된다. 이를 통해 엘리먼트들이 중첩될 수 있다.</li>
  <li>children에는 텍스트에 해당하는 문자열, 엘리먼트, 엘리먼트들의 배열 등이 저장될 수 있다.</li>
  <li>일반적으로 JavaScript의 React.createElement() 함수 또는 JSX의 태그 문법으로 작성한다.</li>
  <li>엘리먼트들로 이루어진 트리를 엘리먼트 트리라 부르며, 이것은 메모리 상에만 존재하는 가상 DOM이다.</li>
</ul>

<p><br /></p>

<h2 id="dom-엘리먼트">DOM 엘리먼트</h2>

<ul>
  <li>엘리먼트의 <code class="language-plaintext highlighter-rouge">type</code>이 태그 이름에 해당하는 문자열인 경우를 말한다(ex. ‘div’, ‘p’, ‘button’)</li>
  <li>해당 태그를 가진 DOM 노드를 표현하며, props 정보를 통해 해당 노드의 속성을 표현한다.</li>
  <li>React가 실제로 화면에 렌더링 하는 대상에 해당한다.</li>
  <li>type이 string이면 태그 이름으로 DOM node를 나타낸 것이다. props는 그 속성에 해당하는 것이다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  type: 'button',
  props: {
    className: 'button-class',
    children: {
      type: 'div',
      props: {
        children: 'text'
      }
    }
  }
}
</code></pre></div></div>

<pre><code class="language-JS">&lt;button class='button-class'&gt;
  &lt;div&gt;
    text
  &lt;/div&gt;
&lt;/button&gt;
</code></pre>

<p>여기서 각 엘리먼트들이 어떻게 중첩되어있는지 집중해야한다.
하나 이상의 자식 엘리먼트를 만들 때 부모 엘리먼트의 children prop으로 명시하게 된다.</p>

<p>중요한 건 자식과 부모 엘리먼트 모두, 그저 description일 뿐이지 실제 인스턴스가 아니라는 것이다.
스크린에서는 엘리먼트를 만들 때 어떠한 것도 참조하지 않는다.</p>

<p>리액트 엘리먼트는 순회하기 쉬우며, 파싱할 필요도 없다. 리액트 엘리먼트는 객체이기 때문에 실제 DOM 엘리먼트보다 훨씬 가볍다.
(객체이기 때문에 바로 접근이 가능하고, 순회가 쉬우며 파싱할 필요가 없으므로)</p>

<p><br /></p>

<h2 id="컴포넌트-엘리먼트">컴포넌트 엘리먼트</h2>
<ul>
  <li>엘레먼트의 type이 문자열이 아니라, 리액트 컴포넌트에 해당하는 클래스나 함수인 경우를 말한다.</li>
  <li>사용자가 직접 정의한 컴포넌트를 표현하며, <code class="language-plaintext highlighter-rouge">입력으로 props를 받으면 렌더링 할 엘리먼트 트리를 반환한다.</code></li>
  <li>클래스형 컴포넌트는 지역 상태를 가질수 있으며, DOM노드의 생명 주기(생성, 수정, 삭제)를 제어할 수 있다.</li>
  <li>함수형 컴포넌트는 render() 함수만 가지는 클래스형 컴포넌트와 동일하며, 지역 상태를 가질 수 없지만 구현이 단순하다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  type: Button,
  props: {
    className: 'button-class',
    children: {
      type: 'div',
      props: {
        children: 'text'
      }
    }
  }
}
</code></pre></div></div>

<p>컴포넌트를 표현하는 엘리먼트도 엘리먼트이다.</p>

<p>아래의 컴포넌트는 Button 타입의 DangerButton을 정의할 수 있게 한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">DangerButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">Button</span><span class="p">,</span>
  <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">children</span><span class="p">:</span> <span class="nx">children</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이제 위의 만들었던 DangerButton 컴포넌트를 하나의 엘리먼트 트리 안에 사용할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">DeleteAccount</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">children</span><span class="p">:</span> <span class="p">[{</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Are you sure?</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nx">DangerButton</span><span class="p">,</span>
      <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Yep</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nx">Button</span><span class="p">,</span>
      <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Cancel</span><span class="dl">'</span>
      <span class="p">}</span>
   <span class="p">}]</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>위의 객체를 JSX로 표현하면 아래와 같다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">DeleteAccount</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Are</span> <span class="nx">you</span> <span class="nx">sure</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">DangerButton</span><span class="o">&gt;</span><span class="nx">Yep</span><span class="o">&lt;</span><span class="sr">/DangerButton</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">color</span><span class="o">=</span><span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="component-encapsulate-element-trees">Component Encapsulate Element Trees</h2>

<p>리액트는 함수나 클래스 타입의 엘리먼트를 만나면, 해당하는 props에 관하여 그 컴포넌트가 어떤 엘리먼트를 렌더링할 것인지 물어본다.</p>

<p>만약 리액트가 아래와 같은 엘리먼트를 만난다면</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">type</span><span class="p">:</span> <span class="nx">Button</span><span class="p">,</span>
  <span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK!</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Button 컴포넌트에게 무엇을 렌더링할 것인지를 물어본다. 그 Button 컴포넌트는 다음의 엘리먼트를 반환한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">className</span><span class="p">:</span> <span class="dl">'</span><span class="s1">button button-blue</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">children</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span>
      <span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">children</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK!</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>리액트는 이 과정을 페이지의 모든 컴포넌트에게 그 아래에 있는 DOM 태그 엘리먼트를 알 때까지 반복한다.</p>

<p>리액트 컴포넌트에서 props는 Input이며, element tree가 output이 된다.</p>

<p>반환된 element tree는 DOM node를 설명하는 엘리먼트와 다른 컴포넌트를 설명하는 엘리먼트가 포함될 수 있다. 이는 그 내부의 DOM 구조에 기대지 않고, 독립적인 UI를 구성할 수 있게 해준다.</p>

<p>리액트가 instance를 생성하고, 업데이트하고, 없앤다. 우리는 그 인스턴스를 컴포넌트로부터 반환한 엘리먼트들로 표현하며, 리액트는 그 인스턴스를 관리한다.</p>]]></content><author><name>GitHub User</name></author><category term="React" /><category term="React" /><category term="Gatsby" /><category term="Next.js" /><category term="Node.js" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[시작으로]]></summary></entry><entry><title type="html">[Gatsby] 정적 웹사이트 설치부터 배포까지</title><link href="/jekyll-theme-yat/react/2022/05/08/gatsby-01.html" rel="alternate" type="text/html" title="[Gatsby] 정적 웹사이트 설치부터 배포까지" /><published>2022-05-08T00:00:00+00:00</published><updated>2022-05-08T00:00:00+00:00</updated><id>/jekyll-theme-yat/react/2022/05/08/gatsby-01</id><content type="html" xml:base="/jekyll-theme-yat/react/2022/05/08/gatsby-01.html"><![CDATA[<h2 id="gatsby-cli-설치하기">Gatsby CLI 설치하기</h2>

<p>Gatsby CLI는 Gatsby 기반의 사이트를 빠르게 생성하는데 도와주는 명령 도구이다.</p>

<ul>
  <li>설치</li>
</ul>

<pre><code class="language-SHELL">npm install -g gatsby-cli
</code></pre>

<ul>
  <li>버전확인</li>
</ul>

<pre><code class="language-SHELL">gatsby --version
Gatsby CLI version: 4.12.1
</code></pre>

<ul>
  <li>사용 가능한 명령 참고하기</li>
</ul>

<pre><code class="language-SHELL">gatsby --help
Usage: gatsby &lt;command&gt; [options]

Commands:
  gatsby develop                      Start development server. Watches files, rebuilds, and hot reloads if something
                                      changes
  gatsby build                        Build a Gatsby project.
  gatsby serve                        Serve previously built Gatsby site.
  gatsby info                         Get environment information for debugging and issue reporting
  gatsby clean                        Wipe the local gatsby environment including built assets and cache
  gatsby repl                         Get a node repl with context of Gatsby environment, see
                                      (https://www.gatsbyjs.com/docs/gatsby-repl/)
  gatsby plugin &lt;cmd&gt; [plugins...]    Useful commands relating to Gatsby plugins
  gatsby new [rootPath] [starter]     Create new Gatsby project.
  gatsby telemetry                    Enable or disable Gatsby anonymous analytics collection.
  gatsby options [cmd] [key] [value]  View or set your gatsby-cli configuration settings.

Options:
  --verbose                Turn on verbose output                                             [boolean] [default: false]
  --no-color, --no-colors  Turn off the color in output                                       [boolean] [default: false]
  --json                   Turn on the JSON logger                                            [boolean] [default: false]
  -h, --help               Show help                                                                           [boolean]
  -v, --version            Show the version of the Gatsby CLI and the Gatsby package in the current project    [boolean]
</code></pre>

<p><br /></p>

<h2 id="gatsby-프로젝트-생성">Gatsby 프로젝트 생성</h2>

<ul>
  <li>Gatsby 사이트를 만들 폴더로 이동 후 명령 실행
    <pre><code class="language-SHELL">gatsby new
</code></pre>
  </li>
  <li>대화형으로 프롬프트가 프로젝트에 관련된 질문들을 입력 및 선택하라고 하는데 자세한 건 <a href="https://www.gatsbyjs.com/docs/tutorial/part-1/">공식문서</a>를 참고한다.</li>
</ul>

<p><br /></p>

<h2 id="gatsby-프로젝트-로컬에서-실행">Gatsby 프로젝트 로컬에서 실행</h2>

<ul>
  <li>명령줄에서 생성한 프로젝트 디렉토리로 이동한다.</li>
</ul>

<pre><code class="language-SHELL">cd [생성한 프로젝트 이름]
</code></pre>

<ul>
  <li>package.json &gt; scripts를 확인하면 <code class="language-plaintext highlighter-rouge">develop</code>, <code class="language-plaintext highlighter-rouge">start</code>, <code class="language-plaintext highlighter-rouge">build</code>, <code class="language-plaintext highlighter-rouge">serve</code>, <code class="language-plaintext highlighter-rouge">clean</code>의 명령이 있는데 개발서버 실행은 <code class="language-plaintext highlighter-rouge">develop</code>이다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-gatsby-site"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-gatsby-site"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s-seongsik"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"gatsby"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"develop"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby develop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby develop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby serve"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"clean"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby clean"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"gatsby"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.13.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"react"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^17.0.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"react-dom"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^17.0.1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>아래와 같이 실행한다.</p>

<pre><code class="language-SHELL">npm run develop or gatsby develop
</code></pre>

<p><img src="https://user-images.githubusercontent.com/52439201/167294372-4e28f7f9-8760-4f68-a69f-85941d2e6b25.png" alt="image" /></p>

<p><br /></p>

<h2 id="github에-배포">Github에 배포</h2>

<h3 id="1-git-repository-생성하기">1. Git Repository 생성하기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">my-gatsby-site</code>라는 name으로 저장소를 생성한다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/52439201/167294467-dc460ec2-3420-4bf5-80a5-4fa1abb4a685.png" alt="image" /></p>

<h3 id="2-gh-pages-package-설치">2. gh-pages package 설치</h3>

<ul>
  <li>Gatsby app을 깃허브 페이지에 푸시하는 가장 쉬운 방법이 gh-pages package를 사용하는 것이다.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>gh-pages <span class="nt">--save-dev</span>
</code></pre></div></div>

<ul>
  <li>배포할 사이트 경로가 <code class="language-plaintext highlighter-rouge">username.github.io/reponame/</code>이기 때문에 <code class="language-plaintext highlighter-rouge">--prefix-paths</code> 플래그를 사용해 경로 접두사를 추가해줘야 404 에러가 발생하지 않는다.</li>
  <li>./gatsby-config.js에서 <code class="language-plaintext highlighter-rouge">pathPrefix</code>를 추가해준다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">siteMetadata</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">pathPrefix</span><span class="p">:</span> <span class="s2">`/[Repository name]`</span><span class="p">,</span>
    <span class="na">siteUrl</span><span class="p">:</span> <span class="s2">`https://www.yourdomain.tld`</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[],</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>package.json에 <code class="language-plaintext highlighter-rouge">deploy</code> 스크립트를 아래와 같이 추가해준다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"develop"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby develop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby develop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby serve"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"clean"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby clean"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"deploy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gatsby build --prefix-paths &amp;&amp; gh-pages -d public"</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="3-원격저장소-연동">3. 원격저장소 연동</h3>

<pre><code class="language-git">git add .
git commit -m "fist commit"
git remote add origin https://github.com/s-seongsik/my-gatsby-site.git
</code></pre>

<h3 id="4-github-pages에-배포">4. GitHub Pages에 배포</h3>

<ul>
  <li>package.json에 추가한 <code class="language-plaintext highlighter-rouge">deploy</code> 스크립트를 실행하면 build하고 build된 파일을 gh-pages라는 브랜치로 push한다.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run deploy
</code></pre></div></div>

<p>아래와 같이 원격저장소에 push된 것을 확인할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/167295442-6f509c5c-5482-4892-bdff-6a9a507fd160.png" alt="image" /></p>

<ul>
  <li>settings &gt; pages에서 Source가 gh-pages여야 하므로 다른 브랜치로 되어있다면 변경해준다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/52439201/167295506-f37cf8bf-0343-4fc4-90fb-0e95b11e28c1.png" alt="image" /></p>

<ul>
  <li>GitHub Pages에 접속</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/52439201/167295545-c221315e-cf98-4843-9cc6-44aebbaa28f5.png" alt="image" /></p>]]></content><author><name>GitHub User</name></author><category term="React" /><category term="React" /><category term="Gatsby" /><category term="Next.js" /><category term="Node.js" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[Gatsby CLI 설치하기]]></summary></entry><entry><title type="html">[Git] 파일 및 폴더명 대소문자 변경 구분하기</title><link href="/jekyll-theme-yat/git/2022/05/02/git-09.html" rel="alternate" type="text/html" title="[Git] 파일 및 폴더명 대소문자 변경 구분하기" /><published>2022-05-02T00:00:00+00:00</published><updated>2022-05-02T00:00:00+00:00</updated><id>/jekyll-theme-yat/git/2022/05/02/git-09</id><content type="html" xml:base="/jekyll-theme-yat/git/2022/05/02/git-09.html"><![CDATA[<h2 id="문제발생">문제발생</h2>

<p>Vue 파일명을 첫 글자를 소문자로 되어있던 것을 대문자로 변경했다. 그리고 이것저것 수정하고 commit 했는데
젠킨스에서 오류가 발생하는 것이다…</p>

<p>로그를 확인해보니 라우터에서 바뀐 파일명을 참조하지 못하는 것이다… 이런</p>

<p>결론은 Git은 변경내용을 체크하는데 기본적으로 파일명/폴더명 대소문자를 구분하지 않는다는 것이다.</p>

<p>예를들어 <code class="language-plaintext highlighter-rouge">user.vue</code>라는 파일명을 <code class="language-plaintext highlighter-rouge">User.vue</code>로 첫 글자만 대문자로 변경해도 git은 알지 못한다.</p>

<h2 id="해결방안">해결방안</h2>

<p>깃 설정을 변경해주면 깔끔하게 해결할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config core.ignorecase <span class="nb">false</span>
</code></pre></div></div>

<p>위의 설정을 변경했는데도 해결되지 않는다면 캐시를 지워보자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">rm</span> <span class="nt">-r</span> <span class="nt">--cached</span> <span class="nb">.</span>
</code></pre></div></div>

<h2 id="확인">확인</h2>

<ul>
  <li>ReportsManage.vue와 ReportsSummary.vue 파일의 첫 글자를 소문자로 변경해보자.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/52439201/166403356-5cfcaf74-f1ae-4673-bbbd-1bdf21f8f63e.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/52439201/166403722-daeb2d75-830d-4be5-be32-41561dd4c429.png" alt="image" /></p>

<ul>
  <li>Git 변경상태 확인을 해봐도 변경된게 없다고 나온다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
On branch dev
nothing to commit, working tree clean
</code></pre></div></div>

<ul>
  <li>깃 설정 변경</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config core.ignorecase <span class="nb">false</span>
</code></pre></div></div>

<p>아래와 같이 변경내용을 추척한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
On branch dev
Untracked files:
  <span class="o">(</span>use <span class="s2">"git add &lt;file&gt;..."</span> to include <span class="k">in </span>what will be committed<span class="o">)</span>
        src/views/pages/reports/reportsManage.vue
        src/views/pages/reports/reportsSummary.vue

nothing added to commit but untracked files present <span class="o">(</span>use <span class="s2">"git add"</span> to track<span class="o">)</span>
</code></pre></div></div>]]></content><author><name>GitHub User</name></author><category term="Git" /><category term="Node.js" /><category term="Javascript" /><summary type="html"><![CDATA[문제발생]]></summary></entry><entry><title type="html">[TypeScript] TypeScript 시작하기</title><link href="/jekyll-theme-yat/typescirpt/2022/04/27/typescript-01.html" rel="alternate" type="text/html" title="[TypeScript] TypeScript 시작하기" /><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><id>/jekyll-theme-yat/typescirpt/2022/04/27/typescript-01</id><content type="html" xml:base="/jekyll-theme-yat/typescirpt/2022/04/27/typescript-01.html"><![CDATA[<h2 id="시작으로">시작으로</h2>

<p><code class="language-plaintext highlighter-rouge">TypeScript</code>는 마이크로소프트가 발표한 자바스크립트를 기반으로 정적 타입 문법을 추가한 프로그래밍 언어이다.
요새 자바스크립트보다 타입스크립트를 사용하는 기업들이 많아지고 있다. 실제로 개발자 구인 시 우대사항 및 필수사항에 명시되어 있을 정도로 웹 프론트에서 핫한 언어이다.</p>

<p><code class="language-plaintext highlighter-rouge">TypeScript</code> 등장 이전의 초창기 자바스크립트는 웹 페이지의 보조적인 기능을 수행하기 위해 한정적인 용도로 사용했다. 대부분 로직은 주로 웹 서버에서 실행되었고 브라우저는 서버로부터 전달받은 HTML과 CSS를 렌더링하는 수준이었다.</p>

<p><code class="language-plaintext highlighter-rouge">HTML5</code>가 등장하기 이전에는 웹 애플리케이션을 플래시, 실버라이트, 액티브엑스와 같은 플러그인에 의존하여 인터렉티브한 웹페이지를 구축해왔다.
<code class="language-plaintext highlighter-rouge">HTML5</code>가 등장함으로써 플로그인에 의존하던 구축 방식에서 자바스크립트로 대체되었다. 또한, AJAX의 활성화로 데스크탑 애플리케이션과 유사한 사용자 경험을 제공할 수 있는 SPA(Single Page Application)가 대세가 되었다. 이로써 과거 서버 측이 담당하던 업무의 많은 부분이 클라이언트 측으로 이동하게 되었고, 자바스크립트는 웹의 어셈블리 언어로 불릴 만큼 중요한 언어로 그 위상이 높아지게 되었다.</p>

<p>자바스크립트도 다른 언어와 마찬가지로 장단점이 존재한다. 자바스크립트는 언어가 잘 정제되기 이전에 서둘러 출시된 문제와 과거 웹페이지의 보조적인 기능을 수행하기 위해 한정적인 용도로 만들어진 태생적 한계로 장점과 단점이 많이 것이 사실이다.</p>

<p>자바스크립트는 C와 JAVA와 같은 C-family 언어와는 구별되는 특성이 있다.</p>
<ul>
  <li>프로토타입 기반의 언어</li>
  <li>스코프와 this</li>
  <li>동적 타입 언어 혹은 느슨한 타입 언어</li>
</ul>

<p>이러한 특성 때문에 클래스 기반의 객체지향 언어(C++, C#, JAVA)에 익숙한 개발자를 혼란스럽게 한다. 또한 코드가 복잡해질 수 있고 디버그와 테스트 공수가 증가하는 등의 문제를 일으킬 수 있어 큰 규모의 프로젝트에서는 주의해야 한다.</p>

<p>이같은 자바스크립트의 태생적 문제를 극복하고자 <code class="language-plaintext highlighter-rouge">TypeScript</code>가 등장하였다. <code class="language-plaintext highlighter-rouge">TypeScript</code>는 자바스크립트(ES5) 상위 확장이다. C#의 창시자인 덴마크 출신 소프트웨어 엔지니어 Anders Hejlsberg(아네르스 하일스베르)가 개발을 주도한 TypeScript는 Microsoft에서 2012년 발표한 오픈소스로, 정적 타이핑을 지원하며 ES6(ECMAScript 2015)의 클래스, 모듈 등과 ES7의 Decorator 등을 지원한다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/165452166-d8b2b457-f5e2-4990-b6d8-d8d6d60f266d.png" alt="image" /></p>

<p><br /></p>

<h2 id="typescript-특징">TypeScript 특징</h2>

<h3 id="1컴파일-언어-정적-타입-언어">1.컴파일 언어, 정적 타입 언어</h3>
<p>자바스크립트는 동적 타입의 인터프리터 언어로 런타임에서 오류를 발견할 수 있다. 이에 반해 타입스크립트는 정적 타입의 컴파일 언어이며 타입스크립트 컴파일러 또는 바벨을 통해 자바스크립트 코드로 변환된다.
코드 작성 단계에서 타입을 체크해 오류를 확인할 수 있고 미리 타입을 결정하기 때문에 실행 속도가 매우 빠르다는 장점이 있다. 하지만 코드 작성 시 매번 타입을 결정해야 하기 때문에 번거롭고 코드량이 증가하며 컴파일 시간이 오래 걸린다는 단점이 있다.</p>

<h3 id="2자바스크립트-슈퍼셋superset">2.자바스크립트 슈퍼셋(Superset)</h3>
<p>타입스크립트는 자바스크립트의 슈퍼셋 언어다. 즉 자바스크립트 기본 문법에 타입스크립트의 문법을 추가한 언어입니다. 따라서 유효한 자바스크립트로 작성한 코드는 확장자를 .js에서 .ts로 변경하고 타입스크립트로 컴파일해 변환할 수 있다.</p>

<h3 id="3객체-지향-프로그래밍-지원">3.객체 지향 프로그래밍 지원</h3>
<p>타입스크립트는 ES6(ECMAScript 6)에서 새롭게 사용된 문법을 포함하고 있으며 클래스, 인터페이스, 상속, 모듈 등과 같은 객체 지향 프로그래밍 패턴을 제공한다.</p>

<p><br /></p>

<h2 id="typescript를-사용해야-하는-이유">TypeScript를 사용해야 하는 이유</h2>

<h3 id="1높은-수준의-코드-탐색과-디버깅">1.높은 수준의 코드 탐색과 디버깅</h3>
<p>타입스크립트는 코드에 목적을 명시하고 목적에 맞지 않는 타입의 변수나 함수들에서 에러를 발생시켜 버그를 사전에 제거합니다. 또한 코드 자동완성이나 실행 전 피드백을 제공하여 작업과 동시에 디버깅이 가능해 생산성을 높일 수 있습니다. 실제로 한 연구에 따르면 모든 자바스크립트 버그의 15%가 사전에 타입스크립트로 감지할 수 있다고 한다.</p>

<h3 id="2자바스크립트-호환">2.자바스크립트 호환</h3>
<p>타입스크립트는 자바스크립트와 100% 호환됩니다. 따라서 프론트엔드 또는 백엔드 어디든 자바스크립트를 사용할 수 있는 곳이라면 타입스크립트도 쓸 수 있습니다. 타입스크립트는 앱과 웹을 구현하는 자바스크립트와 동일한 용도로 사용 가능하며 서버 단에서 개발이 이루어지는 복잡한 대형 프로젝트에서도 빛을 발한다.</p>

<h3 id="3강력한-생태계">3.강력한 생태계</h3>
<p>타입스크립트는 그리 오래되지 않은 언어임에도 불구하고 강력한 생태계를 가지고 있다. 대부분의 라이브러리들이 타입스크립트를 지원하며 마이크로소프트의 비주얼 스튜디오 코드(VSCode)를 비롯해 각종 에디터가 타입스크립트 관련 기능과 플러그인을 지원한다.</p>

<h3 id="4점진적-전환-가능">4.점진적 전환 가능</h3>
<p>기존의 자바스크립트 프로젝트를 타입스크립트로 전환하는데 부담이 있다면 추가 기능이나 특정 기능에만 타입스크립트를 도입함으로써 프로젝트를 점진적으로 전환할 수 있다. 자바스크립트에 주석을 추가하는 것에서부터 시작해 시간이 지남에 따라 코드베이스가 완전이 바뀌도록 준비 기간을 가질 수 있다.</p>

<p>하지만, 새로운 프로그래밍 언어에 대한 러닝 커브(Learning Curve), 상대적으로 낮은 가독성, 코드량 증가 등의 이유로 타입스크립트 사용을 망설이는 개발자가 많다. 프로젝트 성격에 따라 타입스크립트를 사용할지 결정하면 된다. 프로젝트의 규모가 크고 복잡할수록, 유지보수가 중요한 장기 프로젝트일수록 타입스크립트의 이점이 부각될 것이다.</p>

<p><br /></p>

<h2 id="typescript-컴파일러-설치-및-사용">TypeScript 컴파일러 설치 및 사용</h2>

<p>TypeScript 설치하는 방법은 크게 두 가지가 있다.</p>

<ul>
  <li>Node.js의 npm으로 설치하기</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">-g</span> typescript
</code></pre></div></div>

<p>설치 완료 후 TypeScript 설치 버전을 확인한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nt">-v</span>
Version 4.6.3
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>TypeScript의 Visual Studio 플러그인 설치하기
Visual Studio 2017과 Visual Studio 2015 Update 3는 기본적으로 Typescript를 포함하고 있다.</li>
</ul>

<p><br /></p>

<p>TypeScript 컴파일러(tsc)는 TypeScript 파일(.ts)을 자바스크립트 파일로 트랜스파일링한다.</p>
<blockquote>
  <p>컴파일은 일반적으로 소스 코드를 바이트 코드로 변환하는 작업을 의미한다. TypeScript 컴파일러는 TypeScript 파일을 자바스크립트 파일로 변환하므로 컴파일보다는 트랜스파일링(Transpiling)이 보다 적절한 표현이다.</p>
</blockquote>

<p><br /></p>

<p>아래와 같이 TypeScript를 작성해서 javascirpt 파일로 컴파일 해보자. TypeScript 파일의 확장자는 <code class="language-plaintext highlighter-rouge">.ts</code>이다.</p>

<ul>
  <li>웹 브라우저는 오직 자바스크립트 파일만 읽을 수 있으므로 컴파일 될 test.js 파일을 import 해논다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"./test.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<ul>
  <li>아래와 같이 타입스크립트를 작성하고 test.ts로 파일을 생성한다.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`제 이름은 </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">입니다.`</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">userName</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">서성식</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">(</span><span class="nx">userName</span><span class="p">));</span>
</code></pre></div></div>

<p><br /></p>

<p>작성한 test.ts 타입스크립트 파일을 자바스크립트 파일로 트랜스파일링 해보자. 이때 확장자 .ts는 생략할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nb">test</span>
</code></pre></div></div>

<p>실행 결과, 같은 디렉터리에 자바스크립트 파일(test.js)이 아래와 같이 생성된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="se">\</span><span class="s2">uC81C </span><span class="se">\</span><span class="s2">uC774</span><span class="se">\</span><span class="s2">uB984</span><span class="se">\</span><span class="s2">uC740 </span><span class="dl">"</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="dl">"</span><span class="se">\</span><span class="s2">uC785</span><span class="se">\</span><span class="s2">uB2C8</span><span class="se">\</span><span class="s2">uB2E4.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">서성식</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">(</span><span class="nx">userName</span><span class="p">));</span>

</code></pre></div></div>

<p>이때 트랜스파일링된 test.ts의 자바스크립트 버전은 ES3이다. 그 이유는 TypeScript 컴파일 타겟이 ES3로 기본셋팅 되어있기 때문이다.
만약, 자바스크립트 버전을 변경하려면 <code class="language-plaintext highlighter-rouge">--target</code> 또는 <code class="language-plaintext highlighter-rouge">-t</code> 옵션을 사용한다.</p>

<p><br /></p>

<p>현재 TypeScript에서 제공하는 자바스크립트 버전은</p>
<ul>
  <li>ES3(기본), ES5, ES2015, ES2016, ES2017, ES2018, ES2019, ESNEXT</li>
</ul>

<p>ES6 버전으로 트랜스파일링을 실행하려면 아래와 같이 옵션을 추가한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nb">test</span> <span class="nt">-t</span> ES2015
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`제 이름은 </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">입니다.`</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">let</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">서성식</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">(</span><span class="nx">userName</span><span class="p">));</span>
</code></pre></div></div>

<p><br /></p>

<p>트랜스파일링이 성공하여 자바스크립트 파일이 되었을 것이다. Node.js REPL을 이용해 트랜스파일링된 test.js를 실행해보자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node <span class="nb">test
</span>제 이름은 서성식입니다.
</code></pre></div></div>

<p><br /></p>

<h2 id="컴파일-설정-파일tsconfigjson">컴파일 설정 파일(tsconfig.json)</h2>
<p>매번 TypeScript 옵션을 지정하는 것은 번거로운 일이다. 명령어를 매번 입력하지 않고 보다 쉽게 사용하려면 컴파일 설정 파일(tsconfig.json)을 생성하여 사용하는 것이 편리하다.
tsconfig.json는 웹팩, 바벨, 린트 등의 설정 파일과 동일하게 프로젝트 루트 디렉토리에 생성해야 된다.</p>

<h3 id="1tsconfigjson-생성">1.tsconfig.json 생성</h3>

<p>직접 파일을 생성하는 방법도 있지만 명령어를 통해 생성하는 방법도 있다.</p>

<p><code class="language-plaintext highlighter-rouge">tsc --help</code>를 실행해보면 <code class="language-plaintext highlighter-rouge">tsc --init</code>이 작업 디렉토리에 <code class="language-plaintext highlighter-rouge">tsconfig.json</code>를 생성한다고 되어 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nt">--help</span>
tsc: The TypeScript Compiler - Version 4.6.3                                                                            
                                                                                                                     TS 
COMMON COMMANDS

  tsc
  Compiles the current project <span class="o">(</span>tsconfig.json <span class="k">in </span>the working directory.<span class="o">)</span>

  tsc app.ts util.ts
  Ignoring tsconfig.json, compiles the specified files with default compiler options.

  tsc <span class="nt">-b</span>
  Build a composite project <span class="k">in </span>the working directory.

  tsc <span class="nt">--init</span>
  Creates a tsconfig.json with the recommended settings <span class="k">in </span>the working directory.

  tsc <span class="nt">-p</span> ./path/to/tsconfig.json
  Compiles the TypeScript project located at the specified path.

  tsc <span class="nt">--help</span> <span class="nt">--all</span>
  An expanded version of this information, showing all possible compiler options

  tsc <span class="nt">--noEmit</span>
  tsc <span class="nt">--target</span> esnext
  Compiles the current project, with additional settings.
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">tsc --init</code> 명령어를 아래와 같이 실행해보자.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nt">--init</span>

Created a new tsconfig.json with:                                                                                       
                                                                                                                     TS 
  target: es2016
  module: commonjs
  strict: <span class="nb">true
  </span>esModuleInterop: <span class="nb">true
  </span>skipLibCheck: <span class="nb">true
  </span>forceConsistentCasingInFileNames: <span class="nb">true


</span>You can learn more at https://aka.ms/tsconfig.json
</code></pre></div></div>

<p>명령어를 통해 생성된 <code class="language-plaintext highlighter-rouge">tsconfig.json</code> 설정 코드는 다음과 같다. <br />
기본 값만 설정되어 있고 나머지 옵션들은 주석처리 되어 있다. 컴파일 옵션의 각 설정은 변역된 주석을 참고하길 바란다. 컴파일 설정 가능한 모든 옵션은 <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html">tsc CLI Options</a> 에서 확인할 수 있다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">/*</span><span class="w"> </span><span class="err">Visit</span><span class="w"> </span><span class="err">https://aka.ms/tsconfig.json</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">read</span><span class="w"> </span><span class="err">more</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">this</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Projects</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"incremental"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                              </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">incremental</span><span class="w"> </span><span class="err">compilation</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"composite"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">constraints</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">allow</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">TypeScript</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">references.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"tsBuildInfoFile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                          </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">folder</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">.tsbuildinfo</span><span class="w"> </span><span class="err">incremental</span><span class="w"> </span><span class="err">compilation</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"disableSourceOfProjectReferenceRedirect"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">  </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">preferring</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">instead</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">declaration</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">referencing</span><span class="w"> </span><span class="err">composite</span><span class="w"> </span><span class="err">projects</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"disableSolutionSearching"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                 </span><span class="err">/*</span><span class="w"> </span><span class="err">Opt</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">out</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">multi-project</span><span class="w"> </span><span class="err">reference</span><span class="w"> </span><span class="err">checking</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">editing.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"disableReferencedProjectLoad"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">             </span><span class="err">/*</span><span class="w"> </span><span class="err">Reduce</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">number</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">projects</span><span class="w"> </span><span class="err">loaded</span><span class="w"> </span><span class="err">automatically</span><span class="w"> </span><span class="err">by</span><span class="w"> </span><span class="err">TypeScript.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Language</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">Environment</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2016"</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Set</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">language</span><span class="w"> </span><span class="err">version</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">emitted</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">include</span><span class="w"> </span><span class="err">compatible</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">declarations.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">                                        </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">set</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">bundled</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">declaration</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">describe</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">target</span><span class="w"> </span><span class="err">runtime</span><span class="w"> </span><span class="err">environment.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"preserve"</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">what</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">code</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">generated.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                   </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">experimental</span><span class="w"> </span><span class="err">support</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">TC</span><span class="mi">39</span><span class="w"> </span><span class="err">stage</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="err">draft</span><span class="w"> </span><span class="err">decorators.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                    </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">design-type</span><span class="w"> </span><span class="err">metadata</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">decorated</span><span class="w"> </span><span class="err">declarations</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"jsxFactory"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                                 </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">factory</span><span class="w"> </span><span class="err">function</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">targeting</span><span class="w"> </span><span class="err">React</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">emit</span><span class="p">,</span><span class="w"> </span><span class="err">e.g.</span><span class="w"> </span><span class="err">'React.createElement'</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">'h'</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"jsxFragmentFactory"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                         </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">Fragment</span><span class="w"> </span><span class="err">reference</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">fragments</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">targeting</span><span class="w"> </span><span class="err">React</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">emit</span><span class="w"> </span><span class="err">e.g.</span><span class="w"> </span><span class="err">'React.Fragment'</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">'Fragment'.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"jsxImportSource"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">module</span><span class="w"> </span><span class="err">specifier</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">import</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">factory</span><span class="w"> </span><span class="err">functions</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">using</span><span class="w"> </span><span class="err">`jsx:</span><span class="w"> </span><span class="err">react-jsx*`.`</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"reactNamespace"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                             </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">object</span><span class="w"> </span><span class="err">invoked</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">`createElement`.</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">only</span><span class="w"> </span><span class="err">applies</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">targeting</span><span class="w"> </span><span class="err">`react`</span><span class="w"> </span><span class="err">JSX</span><span class="w"> </span><span class="err">emit.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noLib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                    </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">including</span><span class="w"> </span><span class="err">any</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">files</span><span class="p">,</span><span class="w"> </span><span class="err">including</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">lib.d.ts.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"useDefineForClassFields"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">ECMAScript-standard-compliant</span><span class="w"> </span><span class="err">class</span><span class="w"> </span><span class="err">fields.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Modules</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">what</span><span class="w"> </span><span class="err">module</span><span class="w"> </span><span class="err">code</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">generated.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"rootDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">root</span><span class="w"> </span><span class="err">folder</span><span class="w"> </span><span class="err">within</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">                       </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">how</span><span class="w"> </span><span class="err">TypeScript</span><span class="w"> </span><span class="err">looks</span><span class="w"> </span><span class="err">up</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">given</span><span class="w"> </span><span class="err">module</span><span class="w"> </span><span class="err">specifier.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">base</span><span class="w"> </span><span class="err">directory</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">resolve</span><span class="w"> </span><span class="err">non-relative</span><span class="w"> </span><span class="err">module</span><span class="w"> </span><span class="err">names.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">                                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">set</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">entries</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">re-map</span><span class="w"> </span><span class="err">imports</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">additional</span><span class="w"> </span><span class="err">lookup</span><span class="w"> </span><span class="err">locations.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"rootDirs"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">                                   </span><span class="err">/*</span><span class="w"> </span><span class="err">Allow</span><span class="w"> </span><span class="err">multiple</span><span class="w"> </span><span class="err">folders</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">treated</span><span class="w"> </span><span class="err">as</span><span class="w"> </span><span class="err">one</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">resolving</span><span class="w"> </span><span class="err">modules.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"typeRoots"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">multiple</span><span class="w"> </span><span class="err">folders</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">act</span><span class="w"> </span><span class="err">like</span><span class="w"> </span><span class="err">`./node_modules/@types`.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"types"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">                                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">package</span><span class="w"> </span><span class="err">names</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">included</span><span class="w"> </span><span class="err">without</span><span class="w"> </span><span class="err">being</span><span class="w"> </span><span class="err">referenced</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">file.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"allowUmdGlobalAccess"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                     </span><span class="err">/*</span><span class="w"> </span><span class="err">Allow</span><span class="w"> </span><span class="err">accessing</span><span class="w"> </span><span class="err">UMD</span><span class="w"> </span><span class="err">globals</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">modules.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                        </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">importing</span><span class="w"> </span><span class="err">.json</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noResolve"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Disallow</span><span class="w"> </span><span class="err">`import`s</span><span class="p">,</span><span class="w"> </span><span class="err">`require`s</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">`&lt;reference&gt;`s</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">expanding</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">number</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">TypeScript</span><span class="w"> </span><span class="err">should</span><span class="w"> </span><span class="err">add</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">project.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">Support</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Allow</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">part</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">program.</span><span class="w"> </span><span class="err">Use</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">`checkJS`</span><span class="w"> </span><span class="err">option</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">get</span><span class="w"> </span><span class="err">errors</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">these</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"checkJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">type-checked</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"maxNodeModuleJsDepth"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">                        </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">maximum</span><span class="w"> </span><span class="err">folder</span><span class="w"> </span><span class="err">depth</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">checking</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">`node_modules`.</span><span class="w"> </span><span class="err">Only</span><span class="w"> </span><span class="err">applicable</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">`allowJs`.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"declaration"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                              </span><span class="err">/*</span><span class="w"> </span><span class="err">Generate</span><span class="w"> </span><span class="err">.d.ts</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">TypeScript</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">project.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"declarationMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                           </span><span class="err">/*</span><span class="w"> </span><span class="err">Create</span><span class="w"> </span><span class="err">sourcemaps</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">d.ts</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"emitDeclarationOnly"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Only</span><span class="w"> </span><span class="err">output</span><span class="w"> </span><span class="err">d.ts</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Create</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">map</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">emitted</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"outFile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">bundles</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">outputs</span><span class="w"> </span><span class="err">into</span><span class="w"> </span><span class="err">one</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">file.</span><span class="w"> </span><span class="err">If</span><span class="w"> </span><span class="err">`declaration`</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">also</span><span class="w"> </span><span class="err">designates</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">bundles</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">.d.ts</span><span class="w"> </span><span class="err">output.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                                   </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">output</span><span class="w"> </span><span class="err">folder</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">emitted</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                           </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">emitting</span><span class="w"> </span><span class="err">comments.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                   </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">emitting</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">compilation.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"importHelpers"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Allow</span><span class="w"> </span><span class="err">importing</span><span class="w"> </span><span class="err">helper</span><span class="w"> </span><span class="err">functions</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">tslib</span><span class="w"> </span><span class="err">once</span><span class="w"> </span><span class="err">per</span><span class="w"> </span><span class="err">project</span><span class="p">,</span><span class="w"> </span><span class="err">instead</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">including</span><span class="w"> </span><span class="err">them</span><span class="w"> </span><span class="err">per-file.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"importsNotUsedAsValues"</span><span class="p">:</span><span class="w"> </span><span class="s2">"remove"</span><span class="p">,</span><span class="w">               </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">emit/checking</span><span class="w"> </span><span class="err">behavior</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">imports</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">only</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">types</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"downlevelIteration"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                       </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">more</span><span class="w"> </span><span class="err">compliant</span><span class="p">,</span><span class="w"> </span><span class="err">but</span><span class="w"> </span><span class="err">verbose</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">less</span><span class="w"> </span><span class="err">performant</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">iteration.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"sourceRoot"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                                 </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">root</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">debuggers</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">find</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">reference</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">code.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"mapRoot"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">                                    </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">location</span><span class="w"> </span><span class="err">where</span><span class="w"> </span><span class="err">debugger</span><span class="w"> </span><span class="err">should</span><span class="w"> </span><span class="err">locate</span><span class="w"> </span><span class="err">map</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">instead</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">generated</span><span class="w"> </span><span class="err">locations.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"inlineSourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                          </span><span class="err">/*</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">sourcemap</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">inside</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">emitted</span><span class="w"> </span><span class="err">JavaScript.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"inlineSources"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">source</span><span class="w"> </span><span class="err">code</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">sourcemaps</span><span class="w"> </span><span class="err">inside</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">emitted</span><span class="w"> </span><span class="err">JavaScript.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"emitBOM"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                  </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">UTF</span><span class="mi">-8</span><span class="w"> </span><span class="err">Byte</span><span class="w"> </span><span class="err">Order</span><span class="w"> </span><span class="err">Mark</span><span class="w"> </span><span class="err">(BOM)</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">beginning</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">output</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"newLine"</span><span class="p">:</span><span class="w"> </span><span class="s2">"crlf"</span><span class="p">,</span><span class="w">                                </span><span class="err">/*</span><span class="w"> </span><span class="err">Set</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">newline</span><span class="w"> </span><span class="err">character</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">emitting</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"stripInternal"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">emitting</span><span class="w"> </span><span class="err">declarations</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">have</span><span class="w"> </span><span class="err">`@internal`</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">their</span><span class="w"> </span><span class="err">JSDoc</span><span class="w"> </span><span class="err">comments.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noEmitHelpers"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">generating</span><span class="w"> </span><span class="err">custom</span><span class="w"> </span><span class="err">helper</span><span class="w"> </span><span class="err">functions</span><span class="w"> </span><span class="err">like</span><span class="w"> </span><span class="err">`__extends`</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">compiled</span><span class="w"> </span><span class="err">output.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noEmitOnError"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">emitting</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">if</span><span class="w"> </span><span class="err">any</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">checking</span><span class="w"> </span><span class="err">errors</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">reported.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"preserveConstEnums"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                       </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">erasing</span><span class="w"> </span><span class="err">`const</span><span class="w"> </span><span class="err">enum`</span><span class="w"> </span><span class="err">declarations</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">generated</span><span class="w"> </span><span class="err">code.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"declarationDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w">                           </span><span class="err">/*</span><span class="w"> </span><span class="err">Specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">output</span><span class="w"> </span><span class="err">directory</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">generated</span><span class="w"> </span><span class="err">declaration</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"preserveValueImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                     </span><span class="err">/*</span><span class="w"> </span><span class="err">Preserve</span><span class="w"> </span><span class="err">unused</span><span class="w"> </span><span class="err">imported</span><span class="w"> </span><span class="err">values</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">output</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">would</span><span class="w"> </span><span class="err">otherwise</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">removed.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Interop</span><span class="w"> </span><span class="err">Constraints</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"isolatedModules"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                          </span><span class="err">/*</span><span class="w"> </span><span class="err">Ensure</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">each</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">safely</span><span class="w"> </span><span class="err">transpiled</span><span class="w"> </span><span class="err">without</span><span class="w"> </span><span class="err">relying</span><span class="w"> </span><span class="err">on</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">imports.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">             </span><span class="err">/*</span><span class="w"> </span><span class="err">Allow</span><span class="w"> </span><span class="err">'import</span><span class="w"> </span><span class="err">x</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">y'</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">module</span><span class="w"> </span><span class="err">doesn't</span><span class="w"> </span><span class="err">have</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">export.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                             </span><span class="err">/*</span><span class="w"> </span><span class="err">Emit</span><span class="w"> </span><span class="err">additional</span><span class="w"> </span><span class="err">JavaScript</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">ease</span><span class="w"> </span><span class="err">support</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">importing</span><span class="w"> </span><span class="err">CommonJS</span><span class="w"> </span><span class="err">modules.</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">enables</span><span class="w"> </span><span class="err">`allowSyntheticDefaultImports`</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">compatibility.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"preserveSymlinks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                         </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">resolving</span><span class="w"> </span><span class="err">symlinks</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">their</span><span class="w"> </span><span class="err">realpath.</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">correlates</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">same</span><span class="w"> </span><span class="err">flag</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">node.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"forceConsistentCasingInFileNames"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">            </span><span class="err">/*</span><span class="w"> </span><span class="err">Ensure</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">casing</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">correct</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">imports.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Type</span><span class="w"> </span><span class="err">Checking</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">strict</span><span class="w"> </span><span class="err">type-checking</span><span class="w"> </span><span class="err">options.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                            </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">expressions</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">declarations</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">implied</span><span class="w"> </span><span class="err">`any`</span><span class="w"> </span><span class="err">type..</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                         </span><span class="err">/*</span><span class="w"> </span><span class="err">When</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">checking</span><span class="p">,</span><span class="w"> </span><span class="err">take</span><span class="w"> </span><span class="err">into</span><span class="w"> </span><span class="err">account</span><span class="w"> </span><span class="err">`</span><span class="kc">null</span><span class="err">`</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">`undefined`.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                      </span><span class="err">/*</span><span class="w"> </span><span class="err">When</span><span class="w"> </span><span class="err">assigning</span><span class="w"> </span><span class="err">functions</span><span class="p">,</span><span class="w"> </span><span class="err">check</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">ensure</span><span class="w"> </span><span class="err">parameters</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">return</span><span class="w"> </span><span class="err">values</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">subtype-compatible.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"strictBindCallApply"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Check</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">arguments</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">`bind`</span><span class="p">,</span><span class="w"> </span><span class="err">`call`</span><span class="p">,</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">`apply`</span><span class="w"> </span><span class="err">methods</span><span class="w"> </span><span class="err">match</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">original</span><span class="w"> </span><span class="err">function.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"strictPropertyInitialization"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">             </span><span class="err">/*</span><span class="w"> </span><span class="err">Check</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">class</span><span class="w"> </span><span class="err">properties</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">declared</span><span class="w"> </span><span class="err">but</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">set</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">constructor.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                           </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">`this`</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">given</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">`any`.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"useUnknownInCatchVariables"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">               </span><span class="err">/*</span><span class="w"> </span><span class="err">Type</span><span class="w"> </span><span class="err">catch</span><span class="w"> </span><span class="err">clause</span><span class="w"> </span><span class="err">variables</span><span class="w"> </span><span class="err">as</span><span class="w"> </span><span class="err">'unknown'</span><span class="w"> </span><span class="err">instead</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">'any'.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"alwaysStrict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                             </span><span class="err">/*</span><span class="w"> </span><span class="err">Ensure</span><span class="w"> </span><span class="err">'use</span><span class="w"> </span><span class="err">strict'</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">always</span><span class="w"> </span><span class="err">emitted.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                           </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">local</span><span class="w"> </span><span class="err">variables</span><span class="w"> </span><span class="err">aren't</span><span class="w"> </span><span class="err">read.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                       </span><span class="err">/*</span><span class="w"> </span><span class="err">Raise</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">function</span><span class="w"> </span><span class="err">parameter</span><span class="w"> </span><span class="err">isn't</span><span class="w"> </span><span class="err">read</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"exactOptionalPropertyTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">               </span><span class="err">/*</span><span class="w"> </span><span class="err">Interpret</span><span class="w"> </span><span class="err">optional</span><span class="w"> </span><span class="err">property</span><span class="w"> </span><span class="err">types</span><span class="w"> </span><span class="err">as</span><span class="w"> </span><span class="err">written</span><span class="p">,</span><span class="w"> </span><span class="err">rather</span><span class="w"> </span><span class="err">than</span><span class="w"> </span><span class="err">adding</span><span class="w"> </span><span class="err">'undefined'.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                        </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">codepaths</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">do</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">explicitly</span><span class="w"> </span><span class="err">return</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">function.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">               </span><span class="err">/*</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">fallthrough</span><span class="w"> </span><span class="err">cases</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">switch</span><span class="w"> </span><span class="err">statements.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noUncheckedIndexedAccess"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                 </span><span class="err">/*</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">'undefined'</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">index</span><span class="w"> </span><span class="err">signature</span><span class="w"> </span><span class="err">results</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noImplicitOverride"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                       </span><span class="err">/*</span><span class="w"> </span><span class="err">Ensure</span><span class="w"> </span><span class="err">overriding</span><span class="w"> </span><span class="err">members</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">derived</span><span class="w"> </span><span class="err">classes</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">marked</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">override</span><span class="w"> </span><span class="err">modifier.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"noPropertyAccessFromIndexSignature"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">       </span><span class="err">/*</span><span class="w"> </span><span class="err">Enforces</span><span class="w"> </span><span class="err">using</span><span class="w"> </span><span class="err">indexed</span><span class="w"> </span><span class="err">accessors</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">keys</span><span class="w"> </span><span class="err">declared</span><span class="w"> </span><span class="err">using</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">indexed</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"allowUnusedLabels"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                        </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">unused</span><span class="w"> </span><span class="err">labels.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"allowUnreachableCode"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                     </span><span class="err">/*</span><span class="w"> </span><span class="err">Disable</span><span class="w"> </span><span class="err">error</span><span class="w"> </span><span class="err">reporting</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">unreachable</span><span class="w"> </span><span class="err">code.</span><span class="w"> </span><span class="err">*/</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="err">Completeness</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"skipDefaultLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                      </span><span class="err">/*</span><span class="w"> </span><span class="err">Skip</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">checking</span><span class="w"> </span><span class="err">.d.ts</span><span class="w"> </span><span class="err">files</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">included</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">TypeScript.</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">                                 </span><span class="err">/*</span><span class="w"> </span><span class="err">Skip</span><span class="w"> </span><span class="err">type</span><span class="w"> </span><span class="err">checking</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">.d.ts</span><span class="w"> </span><span class="err">files.</span><span class="w"> </span><span class="err">*/</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="2주의">2.주의</h3>
<p>tsc 명령어 뒤에 파일명을 지정하면 <code class="language-plaintext highlighter-rouge">tsconfig.json</code>이 무시되므로 주의해야 한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tsc <span class="nb">test</span> <span class="c"># 파일을 지정했으므로 tsconfig.json이 무시된다.</span>
</code></pre></div></div>

<p>tsconfig.json을 적용하려면 아래와 같이 실행한다. 단 파일명을 지정하지 않으면 프로젝트 폴더 내의 모든 <code class="language-plaintext highlighter-rouge">TypeScript</code> 파일을 대상으로 컴파일이 적용된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tsc
</code></pre></div></div>

<h3 id="3includeexclude-설정">3.include/exclude 설정</h3>

<p>컴파일에 포함할 디렉토리/파일 경로를 설정하거나 제외할 수 있다.<br />
포함/제외할 각 항목에는 <a href="https://ko.wikipedia.org/wiki/%EA%B8%80%EB%A1%9C%EB%B8%8C_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)">glob</a> 패턴을 사용하여 표기할 수 있다.</p>

<blockquote>
  <p>글로브(glob) 패턴은 와일드카드 문자로 여러 파일 이름의 집합을 지정한다. 이를테면 유닉스 명령어 <code class="language-plaintext highlighter-rouge">mv *.txt textfiles/</code>은 현재 디렉터리의 <code class="language-plaintext highlighter-rouge">.txt</code>로 끝나는 이름의 모든 파일을 <code class="language-plaintext highlighter-rouge">textfiles</code> 디렉터리로 이동(mv)시킨다. 여기에서 *는 모든 문자열을 가리키는 와일드카드이고 <code class="language-plaintext highlighter-rouge">*.txt</code>는 글로브 패턴이다.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th style="text-align: left">와일드카드 문자</th>
      <th style="text-align: left">설명</th>
      <th style="text-align: left">예시</th>
      <th style="text-align: left">일치</th>
      <th style="text-align: left">미일치</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">*</td>
      <td style="text-align: left">없는 것을 포함한 어떠한 수의 문자라도 일치</td>
      <td style="text-align: left">Law* / *Law*</td>
      <td style="text-align: left">Law, Laws, 또는 Lawyer / 	Law, GrokLaw, 또는 Lawyer</td>
      <td style="text-align: left">GrokLaw, La, 또는 aw / La, 또는 aw</td>
    </tr>
    <tr>
      <td style="text-align: left">?</td>
      <td style="text-align: left">어떠한 하나의 문자를 일치</td>
      <td style="text-align: left">?at</td>
      <td style="text-align: left">Cat, cat, Bat 또는 bat</td>
      <td style="text-align: left">at</td>
    </tr>
    <tr>
      <td style="text-align: left">[abc]</td>
      <td style="text-align: left">대괄호 안의 하나의 문자를 일치</td>
      <td style="text-align: left">[CB]at</td>
      <td style="text-align: left">Cat 또는 Bat</td>
      <td style="text-align: left">cat 또는 bat</td>
    </tr>
    <tr>
      <td style="text-align: left">[a-z]</td>
      <td style="text-align: left">대괄호 안의 범위에 속하는 하나의 문자를 일치 (로케일에 따라 다름)</td>
      <td style="text-align: left">Letter[0-9]</td>
      <td style="text-align: left">Letter0, Letter1, Letter2 … Letter9</td>
      <td style="text-align: left">Letters, Letter 또는 Letter10</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<ul>
  <li>include 디렉토리안에 있는 타입스크립트 파일들만 컴파일한다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"include/*"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── exclude                 ⨯
│   └── exclude.ts          ⨯
├── include                 ✓
│   ├── include.ts          ✓
│   └── test.ts             ✓
├── index.html
├── package.json
└── tsconfig.json
</code></pre></div></div>

<p>컴파일을 실행해보면 아래와 같이 <code class="language-plaintext highlighter-rouge">include</code>에 포함된 것들만 .js로 변환됐다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$tsc</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/52439201/165471859-a52cd8b7-94a2-4a94-ae90-bf0038044a9d.png" alt="image" /></p>

<h3 id="4파일의-허용-목록을-직접-지정">4.파일의 허용 목록을 직접 지정</h3>

<p>만약 파일을 찾을 수 없으면 오류를 발생한다.</p>

<p>아래와 같이 <code class="language-plaintext highlighter-rouge">include/include.ts</code> 파일만 직접 지정하면 해당 파일만 컴파일 된다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
  </span><span class="nl">"files"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"include/include.ts"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/52439201/165471358-e7542353-0385-4c81-8c96-7feaded9e085.png" alt="image" /></p>]]></content><author><name>GitHub User</name></author><category term="Typescirpt" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[시작으로]]></summary></entry><entry><title type="html">[React] 라이프 사이클 메서드란?</title><link href="/jekyll-theme-yat/react/2022/04/21/react-02.html" rel="alternate" type="text/html" title="[React] 라이프 사이클 메서드란?" /><published>2022-04-21T00:00:00+00:00</published><updated>2022-04-21T00:00:00+00:00</updated><id>/jekyll-theme-yat/react/2022/04/21/react-02</id><content type="html" xml:base="/jekyll-theme-yat/react/2022/04/21/react-02.html"><![CDATA[<h2 id="라이프-사이클-메서드란">라이프 사이클 메서드란?</h2>

<p><code class="language-plaintext highlighter-rouge">LifeCycle Method</code>란 한국말로 “생명주기”라고 한다. React, Vue, angular와 같은 프레임워크들은 MVC패턴에서 View에 해당하는 영역이다. 그렇기 때문에 각 컴포넌트들은 라이프 사이클이 존재한다.</p>

<p>라이프 사이클은 컴포넌트가 브라우저에 생성되고, 업데이트되고, 제거될 때 호출되는 메서드이다. 또한 클래스형 컴포넌트에서만 사용 할 수 있다.</p>

<p>만약, 함수형으로 컴포넌트를 구현한다면 <code class="language-plaintext highlighter-rouge">useEffect</code>를 사용하여 라이프사이클을 구현해야한다.
일단, 라이프 사이클의 유형과 어떻게 사용하는지를 익히는 것에 집중해보자.</p>

<p>그리고, 아래의 이미지는 리액트 라이프 사이클을 나타낸 <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">이미지</a>이다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/164472072-39bf1eab-65b0-4bc0-ae09-d2c2e8881477.png" alt="image" /></p>

<p><br /></p>

<h2 id="라이프-사이클-메서드-유형">라이프 사이클 메서드 유형</h2>

<p>라이프 사이클은 크게 3가지 유형으로 나눌 수 있다.</p>

<ol>
  <li>컴포넌트가 브라우저에 생성될 때 =&gt; <code class="language-plaintext highlighter-rouge">Mount</code>
    <ul>
      <li>마운트는 DOM이 생성되고 웹 브라우저 상에 나타는 것을 말한다.</li>
    </ul>
  </li>
  <li>컴포넌트가 업데이트 될 때 =&gt; <code class="language-plaintext highlighter-rouge">Update</code>
    <ul>
      <li>Props가 바뀔 때</li>
      <li>State가 바뀔 때</li>
      <li>부모 컴포넌트가 리렌더링 될 때</li>
      <li>this.forceUpdate로 강제로 렌더링을 할 때이다.</li>
    </ul>
  </li>
  <li>컴포넌트가 제거 될 때 =&gt; <code class="language-plaintext highlighter-rouge">Unmount</code>
    <ul>
      <li>Unmount는 DOM에서 제거되는 것을 말한다.</li>
    </ul>
  </li>
</ol>

<h3 id="마운트">마운트</h3>

<p>마운트될 때 발생하는 생명주기를 알아보자.</p>

<ul>
  <li>constructor</li>
  <li>getDerivedStateFromProps</li>
  <li>render</li>
  <li>componentDidMount</li>
</ul>

<h4 id="constructor">constructor</h4>

<p><code class="language-plaintext highlighter-rouge">constructor(생성자)</code>는 컴포넌트가 처음 생성될 때 실행되는 메서드이다. 이 메서드는 초기 state를 정의할 수 있다.</p>

<p>클래스형 컴포넌트에서는 초기 state를 사용할 때 <code class="language-plaintext highlighter-rouge">constructor</code>를 사용해야 한다. 
훅에서는 useState hook을 사용하여 초기 state를 설정할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Class</span>
<span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span>  <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//Hooks</span>
<span class="nx">Const</span> <span class="nx">LifeCycle</span> <span class="o">=</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="getderivedstatefromprops">getDerivedStateFromProps</h4>
<p>getDerivedStateFromProps는 props로 받아온 것을 state에 동기화 시키고 싶을 때 사용한다.
컴포넌트가 마운트 될 때와 업데이트 될 때 호출된다. 자주 사용하진 않지만 가끔 사용하기 때문에 알아두면 좋을 것 같다.</p>

<p>아래는 class에서의 사용법과 hooks에서의 사용법을 간단하게 작성한 예제이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Class</span>
<span class="kd">class</span> <span class="nx">Example</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">getDerivedStateFromProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">prevState</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">nextProps</span><span class="p">.</span><span class="nx">value</span> <span class="o">!==</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">value</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//Hooks</span>
<span class="kd">function</span> <span class="nx">ScrollView</span><span class="p">({</span><span class="nx">row</span><span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isScrollingDown</span><span class="p">,</span> <span class="nx">setIsScrollingDown</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">prevRow</span><span class="p">,</span> <span class="nx">setPrevRow</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">row</span> <span class="o">!==</span> <span class="nx">prevRow</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 마지막 렌더링 이후 행이 변경되었습니다. isScrollingDown을 업데이트합니다.</span>
    <span class="nx">setIsScrollingDown</span><span class="p">(</span><span class="nx">prevRow</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">row</span> <span class="o">&gt;</span> <span class="nx">prevRow</span><span class="p">);</span>
    <span class="nx">setPrevRow</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="s2">`Scrolling down: </span><span class="p">${</span><span class="nx">isScrollingDown</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="render">render</h4>
<p>컴포넌트를 렌더링하는 메서드이다. 가장 기초적인 메서드이면서 가장 중요한 메서드이다. 
함수형 컴포넌트에서는 render 메서드를 사용하지 않고 컴포넌트를 렌더링할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Class</span>
<span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span>  <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">컴포넌트입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//Hooks</span>
<span class="nx">Const</span> <span class="nx">LifeCycle</span> <span class="o">=</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">컴포넌트입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div>

<h4 id="componentdidmount">componentDidMount</h4>

<p>componentDidMount는 컴포넌트의 첫 번째 렌더링이 끝나고 호출되는 메서드이다. 이 메서드가 호출되는 시점에는 우리가 만든 컴포넌트가 화면에 나타난 상태이다.
여기선 보통 DOM을 사용해야하는 외부 라이브러리를 연동하거나, 해당 컴포넌트에서 필요한 데이터를 요청하기 위해 Axios, fetch 등 비동기 처리를 요청하거나 DOM의 속성을 읽거나 직접 변경하는 작업을 할 때 사용한다. 함수형 hooks에서는 <code class="language-plaintext highlighter-rouge">useEffect</code>를 활용하여 구현할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Class</span>
<span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Hooks</span>
<span class="kd">const</span> <span class="nx">LifeCycle</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="p">...</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>
<p>useEffect의 사용방법은 <a href="https://ko.reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a>를 참고하자.</p>

<p><br /></p>

<h3 id="업데이트">업데이트</h3>

<p>이번엔 컴포넌트가 업데이트 될 때 발생하는 생명주기를 알아보자.</p>

<ul>
  <li>getDerivedStateFromProps</li>
  <li>shouldComponentUpdate</li>
  <li>getSnapshotBeforeUpdate</li>
  <li>componentDidUpdate</li>
</ul>

<h4 id="getderivedstatefromprops-1">getDerivedStateFromProps</h4>
<p>마운트에서 다룬 내용과 동일하다. 컴포넌트의 <code class="language-plaintext highlighter-rouge">props</code> 나 <code class="language-plaintext highlighter-rouge">state</code> 가 바뀌었을때도 이 메서드가 호출되므로 잘 알아두자!</p>

<h4 id="shouldcomponentupdate">shouldComponentUpdate</h4>
<p>shouldComponentUpdate는 props나 state를 변경했을 때 리렌더링을 할지 말지 결정하는 메서드이다. 이 메서드는 반드시 <code class="language-plaintext highlighter-rouge">false</code>나 <code class="language-plaintext highlighter-rouge">true</code>를 반환해야 한다.
이 메서드는 오직 성능 최적화만을 위한 것이며 렌더링 목적을 방지하는 목적으로 사용하게되면 버그로 이어질 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Class</span>
<span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">value</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Hooks</span>
<span class="kd">const</span> <span class="nx">LifeCycle</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="p">...</span>
  <span class="p">},</span>
  <span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="nx">prevProps</span><span class="p">.</span><span class="nx">value</span>
  <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>
<p>Hooks에서도 props는 React.memo, state는 useMemo를 활용하면 렌더링 성능을 개선할 수 있다고 한다.</p>

<h4 id="getsnapshotbeforeupdate">getSnapshotBeforeUpdate</h4>
<p>getSnapshotBeforeUpdate는 가장 마지막으로 렌더링된 결과가 DOM 등에 반영되기 전에 호출된다. <a href="https://ko.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate">공식문서</a>에서도 사용하는 예는 흔치 않다고 말한다. 보통 채팅 화면처럼 스크롤 위치를 따로 처리하는 작업이 필요한 UI 등을 생각해볼 수 있다고 한다.</p>

<p>스냅샷 값을 반환하거나 null을 반환한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">getSnapshotBeforeUpdate</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">prevState</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">prevProps</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">listRef</span><span class="p">.</span><span class="nx">current</span>
      <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">scrollHeight</span> <span class="o">-</span> <span class="nx">list</span><span class="p">.</span><span class="nx">scrollTop</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>함수형에서는 아직 이 기능을 대체할만한 <code class="language-plaintext highlighter-rouge">hook</code>이 없다고 한다.</p>

<h4 id="componentdidupdate">componentDidUpdate</h4>
<p>componentDidUpdate는 <code class="language-plaintext highlighter-rouge">리렌더링</code>을 완료한 후 호출되는 메서드이다. 업데이트가 끝난 직후이므로, DOM관련 처리를 해도 무방하다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Class</span>
<span class="kd">class</span> <span class="nx">LifeCycle</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">componentDidUpdate</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">prevState</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Hooks</span>
<span class="kd">const</span> <span class="nx">LifeCycle</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="언마운트">언마운트</h3>

<p>이번엔 컴포넌트가 제거 될 때 발생하는 생명주기를 알아보자.</p>

<ul>
  <li>componentWillUnmount</li>
</ul>

<h4 id="componentwillunmount">componentWillUnmount</h4>
<p>componentWillUnmount는 컴포넌트를 DOM에서 제거할 때 호출되는 메서드이다. 여기서는 주로 DOM에 직접 등록했던 이벤트를 제거한다. 
함수형 컴포넌트에서는 <code class="language-plaintext highlighter-rouge">useEffect CleanUp</code> 함수를 통해 해당 메서드를 구현할 수 있다.</p>

<pre><code class="language-JS">// Class
class LifeCycle extends React.Component {
    coomponentWillUnmount() {
        ...
    }
}

// Hooks
const LifeCycle = () =&gt; {
    useEffect(() =&gt; {
      function handleStatusChange(status) {
        setIsOnline(status.isOnline);
      }
      ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
      // effect 이후에 어떻게 정리(clean-up)할 것인지 표시합니다.
      return function cleanup() {
        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
      };
    });
}
</code></pre>

<p><br /></p>

<h2 id="마치며">마치며</h2>

<p>리액트에서 클래스형 컴포넌트로 구현하게 되는 일은 앞으로 많지 않을 것이므로, 대략적인 내용만 숙지하면 될 것 같다.</p>

<p>중요한건, View에서 어떤식으로 라이프 사이클이 돌아가는지 이해하는 것이 중요하다. 가령, 마운트가 무엇이고 그의 생명주기와 관련된 hooks들과 사용방법을 이해하는 것이 중요한 것 같다.</p>

<p>앞으로 더 많은 내용들을 공부해야 해야겠지만 리액트는 정말 매력있는 라이브러리같다.</p>]]></content><author><name>GitHub User</name></author><category term="React" /><category term="React" /><category term="Gatsby" /><category term="Next.js" /><category term="Node.js" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[라이프 사이클 메서드란?]]></summary></entry><entry><title type="html">[React] JSX(JavaScript XML)란?</title><link href="/jekyll-theme-yat/react/2022/04/19/react-01.html" rel="alternate" type="text/html" title="[React] JSX(JavaScript XML)란?" /><published>2022-04-19T00:00:00+00:00</published><updated>2022-04-19T00:00:00+00:00</updated><id>/jekyll-theme-yat/react/2022/04/19/react-01</id><content type="html" xml:base="/jekyll-theme-yat/react/2022/04/19/react-01.html"><![CDATA[<h2 id="jsx란">JSX란?</h2>

<hr />

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">!&lt;</span><span class="sr">/h1&gt;;</span><span class="err"> 
</span></code></pre></div></div>

<p>위의 코드는 문자열도, HTML도 아니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">JSX</code>라고 하며 javascirpt를 확장한 문법이다. JSX라고 하면 템플릿 언어가 떠오를 수 있지만, Javascirpt의 모든 기능이 포함되어 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">JSK</code>는 리액트에서 UI가 어떻게 생겼는지를 정의하고, 사용하는 문법이다.</li>
  <li>브라우저에서 실행하기 전에 babel 이 JSX문법을 JavaScript로 변환한다.</li>
</ul>

<p>밑의 JSX 문법을 바벨로 변환해보자.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span> 
  <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">siksik</span> <span class="nx">blog</span><span class="o">!&lt;</span><span class="sr">/h1&gt; </span><span class="se">)</span><span class="sr">;</span><span class="err"> 
</span><span class="p">}</span>
</code></pre></div></div>

<p>이렇듯 바벨을 JSX 문법을 자바스크립트 문법으로 변환-&gt;출력 해준다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/164239872-4d475ec1-2e81-4132-bf04-7163724cb55a.png" alt="image" /></p>

<p>리액트에서 JSX는 HTML을 작성하듯 사용하기 때문에 가독성과 유연성이 높고 자바스크립트와 동시에 사용할 수 있어 편리하다.</p>

<p><br /></p>

<h2 id="jsx-문법">JSX 문법</h2>

<hr />

<h3 id="최상위-부모-요소-하나로-존재해야-한다">최상위 부모 요소 하나로 존재해야 한다.</h3>
<p>Virtual DOM에서 컴포넌트 변화를 감지할 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리 구조로 이루어져야 한다는 규칙이 있기 때문이다.</p>

<ul>
  <li>밑에는 같은 레벨의 <code class="language-plaintext highlighter-rouge">div</code> 요소가 2개 존재하므로 에러를 발생시킨다.
    <pre><code class="language-JS">// Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment &lt;&gt;...&lt;/&gt;? (7:6)
const App = () =&gt; {
return (
    &lt;div&gt;안녕하세요?&lt;/div&gt;
    &lt;div&gt;반갑습니다.&lt;/div&gt;
)
}
</code></pre>
  </li>
  <li>따라서 아래와 같이 작성해야 한다.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">반갑습니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h3 id="jsx-표현식-포함">JSX 표현식 포함</h3>
<p>JSX의 중괄호안에는 유효한 모든 <code class="language-plaintext highlighter-rouge">JavaScript</code> 표현식을 넣을 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">서성식</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="jsx도-표현식이다">JSX도 표현식이다.</h3>
<p>JSX를 <code class="language-plaintext highlighter-rouge">if</code>구문이나 <code class="language-plaintext highlighter-rouge">for</code> loop 안에 넣어 사용하고, 변수에 할당하고, 인자로서 받고, 함수로부터 반환할 수 있다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// if구문안에 사용</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">formatName</span><span class="p">(</span><span class="nx">user</span><span class="p">)}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?.</span> <span class="nx">서성식입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span><span class="p">}</span>
</code></pre></div></div>

<p>반대로, <code class="language-plaintext highlighter-rouge">if</code>구문이나 <code class="language-plaintext highlighter-rouge">for</code> loop는 JavaScript 표현식이 아니기 때문에 JSX 내부 자바스크립트 표현식에서는 사용할 수 없다.
따라서, 조건에 따라 JSX 주변 코드에서 <code class="language-plaintext highlighter-rouge">if</code>구문을 사용하거나, 중괄호안에 삼항 연산자(조건부 연산자)를 넣어 사용한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">man</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">formatName</span><span class="p">(</span><span class="nx">user</span><span class="p">)}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">man</span><span class="o">===</span><span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span> <span class="p">?</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">남자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">여자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)}</span>
    <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?.</span> <span class="nx">서성식입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="react-dom은-html-어트리뷰트-이름-대신-camelcase-명명-규칙을-사용-한다">React DOM은 HTML 어트리뷰트 이름 대신 camelCase 명명 규칙을 사용 한다.</h3>
<ul>
  <li>JSX에서 자바스크립트를 사용하려면 중괄호를 사용하는 것처럼, CSS을 적용하려면 객체 형태로 넣어야 한다.</li>
  <li>camelCase 표기법으로 작성해야한다.(background-color =&gt; backgroundColor)</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">man</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">css</span> <span class="o">=</span> <span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="na">fontSize</span><span class="p">:</span> <span class="dl">'</span><span class="s1">20px</span><span class="dl">'</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">formatName</span><span class="p">(</span><span class="nx">user</span><span class="p">)}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">man</span><span class="o">===</span><span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span> <span class="p">?</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">남자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">여자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)}</span>
    <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?.</span> <span class="nx">서성식입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="class-대신-classname">class 대신 className</h3>
<ul>
  <li>JSX에서는 class대신 className으로 사용해야 한다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">man</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">css</span> <span class="o">=</span> <span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="na">fontSize</span><span class="p">:</span> <span class="dl">'</span><span class="s1">20px</span><span class="dl">'</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">'</span><span class="s1">testClass</span><span class="dl">'</span> <span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">formatName</span><span class="p">(</span><span class="nx">user</span><span class="p">)}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">man</span><span class="o">===</span><span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span> <span class="p">?</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">남자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">여자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)}</span>
    <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?.</span> <span class="nx">서성식입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span><span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/52439201/164252264-1332b9b7-0f3a-4ff1-8c0e-cc58489928cb.png" alt="image" /></p>

<h3 id="jsx에서-주석-사용">JSX에서 주석 사용</h3>
<ul>
  <li>JSX 내에서 주석을 사용하려면 {/<em>…</em>/}와 같이 사용해야 한다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">man</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">css</span> <span class="o">=</span> <span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="na">fontSize</span><span class="p">:</span> <span class="dl">'</span><span class="s1">20px</span><span class="dl">'</span> <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">potentiallyMaliciousInput</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="p">{</span><span class="cm">/* 주석입니다. */</span><span class="p">}</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?</span> <span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">'</span><span class="s1">testClass</span><span class="dl">'</span> <span class="o">&gt;</span><span class="nx">저는</span> <span class="p">{</span><span class="nx">formatName</span><span class="p">(</span><span class="nx">user</span><span class="p">)}</span><span class="nx">입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">man</span><span class="o">===</span><span class="dl">'</span><span class="s1">Y</span><span class="dl">'</span> <span class="p">?</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">남자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">저는</span> <span class="nx">여자입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="p">)}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)}</span>
    <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕하세요</span><span class="p">?.</span> <span class="nx">서성식입니다</span><span class="p">.</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span><span class="p">}</span>
</code></pre></div></div>]]></content><author><name>GitHub User</name></author><category term="React" /><category term="React" /><category term="Gatsby" /><category term="Next.js" /><category term="Node.js" /><category term="Typescirpt" /><category term="Javascript" /><category term="ES6" /><summary type="html"><![CDATA[JSX란?]]></summary></entry></feed>